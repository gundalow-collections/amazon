- block:
  - name: Create VPC for use in testing
    register: testing_vpc
    ansible.amazon.ec2_vpc_net:
      name: '{{ resource_prefix }}-vpc'
      cidr_block: 10.99.0.0/16
      tags:
        Name: Ansible ec2_instance Testing VPC
      tenancy: default
  - name: Create default subnet in zone A
    register: testing_subnet_a
    ansible.amazon.ec2_vpc_subnet:
      state: present
      vpc_id: '{{ testing_vpc.vpc.id }}'
      cidr: 10.99.0.0/24
      az: '{{ aws_region }}a'
      resource_tags:
        Name: '{{ resource_prefix }}-subnet-a'
  - name: Create secondary subnet in zone B
    register: testing_subnet_b
    ansible.amazon.ec2_vpc_subnet:
      state: present
      vpc_id: '{{ testing_vpc.vpc.id }}'
      cidr: 10.99.1.0/24
      az: '{{ aws_region }}b'
      resource_tags:
        Name: '{{ resource_prefix }}-subnet-b'
  - name: create a security group with the vpc
    register: sg
    ansible.amazon.ec2_group:
      name: '{{ resource_prefix }}-sg'
      description: a security group for ansible tests
      vpc_id: '{{ testing_vpc.vpc.id }}'
      rules:
      - proto: tcp
        ports:
        - 22
        - 80
        cidr_ip: 0.0.0.0/0
  - assert:
      that:
      - 1 == 0
  - name: Make instance in the testing subnet created in the test VPC
    register: in_test_vpc
    ansible.amazon.ec2_instance:
      name: '{{ resource_prefix }}-test-basic-vpc-create'
      image_id: '{{ ec2_ami_image[aws_region] }}'
      user_data: '#cloud-config

        package_upgrade: true

        package_update: true

        '
      tags:
        TestId: '{{ resource_prefix }}'
        Something: else
      security_groups: '{{ sg.group_id }}'
      network:
        source_dest_check: false
      vpc_subnet_id: '{{ testing_subnet_b.subnet.id }}'
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sda1
        ebs:
          delete_on_termination: true
  - name: Try to re-make the instance, hopefully this shows changed=False
    register: remake_in_test_vpc
    ansible.amazon.ec2_instance:
      name: '{{ resource_prefix }}-test-basic-vpc-create'
      image_id: '{{ ec2_ami_image[aws_region] }}'
      user_data: '#cloud-config

        package_upgrade: true

        package_update: true

        '
      tags:
        TestId: '{{ resource_prefix }}'
        Something: else
      security_groups: '{{ sg.group_id }}'
      vpc_subnet_id: '{{ testing_subnet_b.subnet.id }}'
      instance_type: t2.micro
  - name: Remaking the same instance resulted in no changes
    assert:
      that: not remake_in_test_vpc.changed
  - name: check that instance IDs match anyway
    assert:
      that: remake_in_test_vpc.instance_ids[0] == in_test_vpc.instance_ids[0]
  - name: check that source_dest_check was set to false
    assert:
      that: not remake_in_test_vpc.instances[0].source_dest_check
  - name: Alter it by adding tags
    register: add_another_tag
    ansible.amazon.ec2_instance:
      name: '{{ resource_prefix }}-test-basic-vpc-create'
      image_id: '{{ ec2_ami_image[aws_region] }}'
      tags:
        TestId: '{{ resource_prefix }}'
        Another: thing
      security_groups: '{{ sg.group_id }}'
      vpc_subnet_id: '{{ testing_subnet_b.subnet.id }}'
      instance_type: t2.micro
  - register: check_tags
    ansible.amazon.ec2_instance_info:
      instance_ids: '{{ add_another_tag.instance_ids }}'
  - name: Remaking the same instance resulted in no changes
    assert:
      that:
      - check_tags.instances[0].tags.Another == 'thing'
      - check_tags.instances[0].tags.Something == 'else'
  - name: Purge a tag
    ansible.amazon.ec2_instance:
      name: '{{ resource_prefix }}-test-basic-vpc-create'
      image_id: '{{ ec2_ami_image[aws_region] }}'
      purge_tags: true
      tags:
        TestId: '{{ resource_prefix }}'
        Another: thing
      security_groups: '{{ sg.group_id }}'
      vpc_subnet_id: '{{ testing_subnet_b.subnet.id }}'
      instance_type: t2.micro
  - register: check_tags
    ansible.amazon.ec2_instance_info:
      instance_ids: '{{ add_another_tag.instance_ids }}'
  - name: Remaking the same instance resulted in no changes
    assert:
      that:
      - '''Something'' not in check_tags.instances[0].tags'
  - name: Terminate instance
    register: result
    ansible.amazon.ec2_instance:
      filters:
        tag:TestId: '{{ resource_prefix }}'
      state: absent
  - assert:
      that: result.changed
  - name: Terminate instance
    register: result
    ansible.amazon.ec2_instance:
      instance_ids: '{{ in_test_vpc.instance_ids }}'
      state: absent
  - assert:
      that: not result.changed
  - name: check that subnet-default public IP rule was followed
    assert:
      that:
      - in_test_vpc.instances[0].public_dns_name == ""
      - in_test_vpc.instances[0].private_ip_address.startswith("10.22.33")
      - in_test_vpc.instances[0].subnet_id == testing_subnet_b.subnet.id
  - name: check that tags were applied
    assert:
      that:
      - in_test_vpc.instances[0].tags.Name.startswith(resource_prefix)
      - in_test_vpc.instances[0].state.name == 'running'
  always:
  - name: remove the security group
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_group:
      name: '{{ resource_prefix }}-sg'
      description: a security group for ansible tests
      vpc_id: '{{ testing_vpc.vpc.id }}'
      state: absent
  - name: remove subnet A
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_subnet:
      state: absent
      vpc_id: '{{ testing_vpc.vpc.id }}'
      cidr: 10.99.0.0/24
  - name: remove subnet B
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_subnet:
      state: absent
      vpc_id: '{{ testing_vpc.vpc.id }}'
      cidr: 10.99.1.0/24
  - name: remove the VPC
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_net:
      name: '{{ resource_prefix }}-vpc'
      cidr_block: 10.99.0.0/16
      state: absent
      tags:
        Name: Ansible Testing VPC
      tenancy: default
