- name: Test incomplete credentials with ec2_asg
  block:
  - name: test invalid profile
    ignore_errors: true
    register: result
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      region: '{{ aws_region }}'
      profile: notavalidprofile
  - name: null
    assert:
      that:
      - '''The config profile (notavalidprofile) could not be found'' in result.msg'
  - name: test partial credentials
    ignore_errors: true
    register: result
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      region: '{{ aws_region }}'
      aws_access_key: '{{ aws_access_key }}'
  - name: null
    assert:
      that:
      - '''Partial credentials found in explicit, missing: aws_secret_access_key''
        in result.msg'
  - name: test without specifying region
    ignore_errors: true
    register: result
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
  - name: null
    assert:
      that:
      - result.msg == 'The ec2_asg module requires a region and none was found in
        configuration, environment variables or module parameters'
- name: Test incomplete arguments with ec2_asg
  block:
  - name: test without specifying required module options
    ignore_errors: true
    register: result
    ansible.amazon.ec2_asg:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
  - name: assert name is a required module option
    assert:
      that:
      - 'result.msg == ''missing required arguments: name'''
- name: Run ec2_asg integration tests.
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:
  - name: Find AMI to use
    register: ec2_amis
    ansible.amazon.ec2_ami_info:
      owners: amazon
      filters:
        name: '{{ ec2_ami_name }}'
  - set_fact:
      ec2_ami_image: '{{ ec2_amis.images[0].image_id }}'
  - name: load balancer name has to be less than 32 characters
    set_fact:
      load_balancer_name: '{{ item }}-lb'
    with_items: '{{ resource_prefix | regex_findall(''.{8}$'') }}'
  - name: Create VPC for use in testing
    register: testing_vpc
    ansible.amazon.ec2_vpc_net:
      name: '{{ resource_prefix }}-vpc'
      cidr_block: 10.55.77.0/24
      tenancy: default
  - name: Create internet gateway for use in testing
    register: igw
    ansible.amazon.ec2_vpc_igw:
      vpc_id: '{{ testing_vpc.vpc.id }}'
      state: present
  - name: Create subnet for use in testing
    register: testing_subnet
    ansible.amazon.ec2_vpc_subnet:
      state: present
      vpc_id: '{{ testing_vpc.vpc.id }}'
      cidr: 10.55.77.0/24
      az: '{{ aws_region }}a'
      resource_tags:
        Name: '{{ resource_prefix }}-subnet'
  - name: create routing rules
    ansible.amazon.ec2_vpc_route_table:
      vpc_id: '{{ testing_vpc.vpc.id }}'
      tags:
        created: '{{ resource_prefix }}-route'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: '{{ igw.gateway_id }}'
      subnets:
      - '{{ testing_subnet.subnet.id }}'
  - name: create a security group with the vpc created in the ec2_setup
    register: sg
    ansible.amazon.ec2_group:
      name: '{{ resource_prefix }}-sg'
      description: a security group for ansible tests
      vpc_id: '{{ testing_vpc.vpc.id }}'
      rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
  - name: ensure launch configs exist
    with_items:
    - '{{ resource_prefix }}-lc'
    - '{{ resource_prefix }}-lc-2'
    ansible.amazon.ec2_lc:
      name: '{{ item }}'
      assign_public_ip: true
      image_id: '{{ ec2_ami_image }}'
      user_data: "#cloud-config\npackage_upgrade: true\npackage_update: true\npackages:\n\
        \  - httpd\nruncmd:\n  - \"service httpd start\"\n"
      security_groups: '{{ sg.group_id }}'
      instance_type: t3.micro
  - name: launch asg and wait for instances to be deemed healthy (no ELB)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc'
      desired_capacity: 1
      min_size: 1
      max_size: 1
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      state: present
      wait_for_instances: true
  - assert:
      that:
      - output.viable_instances == 1
  - name: Tag asg
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      tags:
      - tag_a: value 1
        propagate_at_launch: false
      - tag_b: value 2
        propagate_at_launch: true
  - assert:
      that:
      - output.tags | length == 2
      - output is changed
  - name: Re-Tag asg (different order)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      tags:
      - tag_b: value 2
        propagate_at_launch: true
      - tag_a: value 1
        propagate_at_launch: false
  - assert:
      that:
      - output.tags | length == 2
      - output is not changed
  - name: Re-Tag asg new tags
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      tags:
      - tag_c: value 3
        propagate_at_launch: false
  - assert:
      that:
      - output.tags | length == 1
      - output is changed
  - name: Re-Tag asg update propagate_at_launch
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      tags:
      - tag_c: value 3
        propagate_at_launch: true
  - assert:
      that:
      - output.tags | length == 1
      - output is changed
  - name: Enable metrics collection
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      metrics_collection: true
  - assert:
      that:
      - output is changed
  - name: Enable metrics collection (check idempotency)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      metrics_collection: true
  - assert:
      that:
      - output is not changed
  - name: Disable metrics collection
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      metrics_collection: false
  - assert:
      that:
      - output is changed
  - name: Disable metrics collection (check idempotency)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      metrics_collection: false
  - assert:
      that:
      - output is not changed
  - name: kill asg
    async: 400
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      state: absent
      wait_timeout: 800
  - name: launch asg and do not wait for instances to be deemed healthy (no ELB)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc'
      desired_capacity: 1
      min_size: 1
      max_size: 1
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      wait_for_instances: false
      state: present
  - assert:
      that:
      - output.viable_instances == 0
  - name: kill asg
    async: 400
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      state: absent
      wait_timeout: 800
  - name: create asg with asg metrics enabled
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      metrics_collection: true
      launch_config_name: '{{ resource_prefix }}-lc'
      desired_capacity: 0
      min_size: 0
      max_size: 0
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      state: present
  - assert:
      that:
      - '''Group'' in output.metrics_collection.0.Metric'
  - name: kill asg
    async: 400
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      state: absent
      wait_timeout: 800
  - name: launch load balancer
    register: load_balancer
    ansible.amazon.ec2_elb_lb:
      name: '{{ load_balancer_name }}'
      state: present
      security_group_ids:
      - '{{ sg.group_id }}'
      subnets: '{{ testing_subnet.subnet.id }}'
      connection_draining_timeout: 60
      listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
      health_check:
        ping_protocol: tcp
        ping_port: 80
        ping_path: /
        response_timeout: 5
        interval: 10
        unhealthy_threshold: 4
        healthy_threshold: 2
  - name: launch asg and wait for instances to be deemed healthy (ELB)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc'
      health_check_type: ELB
      desired_capacity: 1
      min_size: 1
      max_size: 1
      health_check_period: 300
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      load_balancers: '{{ load_balancer_name }}'
      wait_for_instances: true
      wait_timeout: 900
      state: present
  - assert:
      that:
      - output.viable_instances == 1
  - name: add 2 more instances wait for instances to be deemed healthy (ELB)
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc'
      health_check_type: ELB
      desired_capacity: 3
      min_size: 3
      max_size: 5
      health_check_period: 600
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      load_balancers: '{{ load_balancer_name }}'
      wait_for_instances: true
      wait_timeout: 1200
      state: present
  - assert:
      that:
      - output.viable_instances == 3
  - name: perform rolling update to new AMI
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc-2'
      health_check_type: ELB
      desired_capacity: 3
      min_size: 1
      max_size: 5
      health_check_period: 900
      load_balancers: '{{ load_balancer_name }}'
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      wait_for_instances: true
      replace_all_instances: true
      wait_timeout: 1800
      state: present
  - assert:
      that:
      - item.value.launch_config_name == '{{ resource_prefix }}-lc-2'
    with_dict: '{{ output.instance_facts }}'
  - assert:
      that:
      - output.viable_instances == 3
  - name: perform rolling update to new AMI while removing the load balancer
    register: output
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc'
      health_check_type: EC2
      desired_capacity: 3
      min_size: 1
      max_size: 5
      health_check_period: 900
      load_balancers: []
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      wait_for_instances: true
      replace_all_instances: true
      wait_timeout: 1800
      state: present
  - assert:
      that:
      - item.value.launch_config_name == '{{ resource_prefix }}-lc'
    with_dict: '{{ output.instance_facts }}'
  - assert:
      that:
      - output.viable_instances == 3
  - name: 'perform rolling update to new AMI with lc_check: false'
    async: 1800
    poll: 0
    register: asg_job
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc-2'
      health_check_type: EC2
      desired_capacity: 3
      min_size: 1
      max_size: 5
      health_check_period: 900
      load_balancers: []
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      wait_for_instances: true
      replace_all_instances: true
      replace_batch_size: 3
      lc_check: false
      wait_timeout: 1800
      state: present
  - name: get ec2_asg facts for 3 minutes
    register: output
    loop_control:
      pause: 15
    with_sequence: count=12
    ansible.amazon.ec2_asg_info:
      name: '{{ resource_prefix }}-asg'
  - set_fact:
      inst_id_json_query: results[*].results[*].instances[*].instance_id
  - assert:
      that:
      - lookup('flattened',output|json_query(inst_id_json_query)).split(',')|unique|length
        == 6
  - name: Ensure ec2_asg task completes
    async_status: jid="{{ asg_job.ansible_job_id }}"
    register: status
    until: status is finished
    retries: 200
    delay: 15
  - name: kill asg
    async: 400
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      state: absent
      wait_timeout: 800
  - name: 'new asg with lc_check: false'
    async: 1800
    poll: 0
    register: asg_job
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      launch_config_name: '{{ resource_prefix }}-lc'
      health_check_type: EC2
      desired_capacity: 3
      min_size: 1
      max_size: 5
      health_check_period: 900
      load_balancers: []
      vpc_zone_identifier: '{{ testing_subnet.subnet.id }}'
      wait_for_instances: true
      replace_all_instances: true
      replace_batch_size: 3
      lc_check: false
      wait_timeout: 1800
      state: present
  - name: get ec2_asg information
    register: output
    loop_control:
      pause: 15
    with_sequence: count=12
    ansible.amazon.ec2_asg_info:
      name: '{{ resource_prefix }}-asg'
  - set_fact:
      inst_id_json_query: results[*].results[*].instances[*].instance_id
  - assert:
      that:
      - lookup('flattened',output|json_query(inst_id_json_query)).split(',')|unique|length
        == 3
  - name: Ensure ec2_asg task completes
    async_status: jid="{{ asg_job.ansible_job_id }}"
    register: status
    until: status is finished
    retries: 200
    delay: 15
  always:
  - name: kill asg
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_asg:
      name: '{{ resource_prefix }}-asg'
      state: absent
  - name: remove the load balancer
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_elb_lb:
      name: '{{ load_balancer_name }}'
      state: absent
      security_group_ids:
      - '{{ sg.group_id }}'
      subnets: '{{ testing_subnet.subnet.id }}'
      wait: true
      connection_draining_timeout: 60
      listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
      health_check:
        ping_protocol: tcp
        ping_port: 80
        ping_path: /
        response_timeout: 5
        interval: 10
        unhealthy_threshold: 4
        healthy_threshold: 2
  - name: remove launch configs
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    with_items:
    - '{{ resource_prefix }}-lc'
    - '{{ resource_prefix }}-lc-2'
    ansible.amazon.ec2_lc:
      name: '{{ resource_prefix }}-lc'
      state: absent
  - name: remove the security group
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_group:
      name: '{{ resource_prefix }}-sg'
      description: a security group for ansible tests
      vpc_id: '{{ testing_vpc.vpc.id }}'
      state: absent
  - name: remove routing rules
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_route_table:
      state: absent
      vpc_id: '{{ testing_vpc.vpc.id }}'
      tags:
        created: '{{ resource_prefix }}-route'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: '{{ igw.gateway_id }}'
      subnets:
      - '{{ testing_subnet.subnet.id }}'
  - name: remove internet gateway
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_igw:
      vpc_id: '{{ testing_vpc.vpc.id }}'
      state: absent
  - name: remove the subnet
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_subnet:
      state: absent
      vpc_id: '{{ testing_vpc.vpc.id }}'
      cidr: 10.55.77.0/24
  - name: remove the VPC
    register: removed
    until: removed is not failed
    ignore_errors: true
    retries: 10
    ansible.amazon.ec2_vpc_net:
      name: '{{ resource_prefix }}-vpc'
      cidr_block: 10.55.77.0/24
      state: absent
