- name: set up aws connection info
  set_fact:
    aws_connection_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
  no_log: true
- name: mark rule set active
  block:
  - name: create rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
  - name: mark rule set active
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: assert changed to active
    assert:
      that:
      - result.changed == True
      - result.active == True
  - name: remark rule set active
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: assert changed is False
    assert:
      that:
      - result.changed == False
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: create rule set active
  block:
  - name: create rule set
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: assert changed to existing and active
    assert:
      that:
      - result.changed == True
      - result.active == True
      - default_rule_set in result.rule_sets|map(attribute='name')
  - name: remark rule set active
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: assert changed is False
    assert:
      that:
      - result.changed == False
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: mark rule set inactive
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: mark rule set inactive
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: false
  - name: assert changed to inactive
    assert:
      that:
      - result.changed == True
      - result.active == False
  - name: remark rule set inactive
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: false
  - name: assert changed is False
    assert:
      that:
      - result.changed == False
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: Absent active flag does not change active status
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: recreate rule set
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
  - name: assert not changed and still active
    assert:
      that:
      - result.changed == False
      - result.active == True
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: Cannot Remove Active Rule Set
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: remove rule set
    register: result
    failed_when: result.error.code != 'CannotDelete'
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
  - name: assert error code is CannotDelete
    assert:
      that:
      - result.error.code == 'CannotDelete'
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: Remove Active Rule Set with Force
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: force remove rule set
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
  - name: assert changed and absent
    assert:
      that:
      - result.changed == True
      - default_rule_set not in result.rule_sets|map(attribute='name')
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: Force Remove of Inactive Rule Set does Not Affect Active Rule Set
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: create inactive rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ second_rule_set }}'
      active: false
  - name: force remove inactiave rule set
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ second_rule_set }}'
      state: absent
      force: true
  - name: assert changed and absent
    assert:
      that:
      - result.changed == True
      - second_rule_set not in result.rule_sets|map(attribute='name')
  - name: remark active rule set active
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: assert no change
    assert:
      that:
      - result.changed == False
  always:
  - name: cleanup rule set
    loop:
    - '{{ default_rule_set }}'
    - '{{ second_rule_set }}'
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ item }}'
      state: absent
      force: true
- name: mark rule set inactive in check mode
  block:
  - name: create rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: mark rule set inactive in check mode
    register: result
    check_mode: true
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: false
  - name: assert changed to inactive
    assert:
      that:
      - result.changed == True
      - result.active == False
  - name: remark rule set inactive
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: false
  - name: assert changed is True since previous inactive was in check mode
    assert:
      that:
      - result.changed == True
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: Cannot Remove Active Rule Set in check mode
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: remove rule set
    register: result
    failed_when: result.error.code != 'CannotDelete'
    check_mode: true
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
  - name: assert error code is CannotDelete
    assert:
      that:
      - result.error.code == 'CannotDelete'
  always:
  - name: cleanup rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
- name: Remove Active Rule Set with Force in check mode
  block:
  - name: create active rule set
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      active: true
  - name: force remove rule set
    register: result
    check_mode: true
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
  - name: assert changed and absent
    assert:
      that:
      - result.changed == True
      - default_rule_set not in result.rule_sets|map(attribute='name')
  always:
  - name: cleanup rule set
    register: result
    ansible.amazon.aws_ses_rule_set:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ default_rule_set }}'
      state: absent
      force: true
  - name: assert changed is True since previous removal was in check mode
    assert:
      that:
      - result.changed == True
