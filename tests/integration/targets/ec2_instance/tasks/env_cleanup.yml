- name: set connection information for all tasks
  set_fact:
    aws_connection_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
  no_log: true
- name: remove any instances in the test VPC
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_instance:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    filters:
      vpc_id: '{{ testing_vpc.vpc.id }}'
    state: absent
- name: remove ENIs
  register: enis
  ansible.amazon.ec2_eni_info:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    filters:
      vpc-id: '{{ testing_vpc.vpc.id }}'
- name: delete all ENIs
  until: removed is not failed
  with_items: '{{ enis.network_interfaces }}'
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_eni:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    eni_id: '{{ item.id }}'
    state: absent
- name: remove the security group
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_group:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    name: '{{ resource_prefix }}-sg'
    description: a security group for ansible tests
    vpc_id: '{{ testing_vpc.vpc.id }}'
    state: absent
- name: remove routing rules
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_vpc_route_table:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    state: absent
    vpc_id: '{{ testing_vpc.vpc.id }}'
    tags:
      created: '{{ resource_prefix }}-route'
    routes:
    - dest: 0.0.0.0/0
      gateway_id: '{{ igw.gateway_id }}'
    subnets:
    - '{{ testing_subnet_a.subnet.id }}'
    - '{{ testing_subnet_b.subnet.id }}'
- name: remove internet gateway
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_vpc_igw:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    vpc_id: '{{ testing_vpc.vpc.id }}'
    state: absent
- name: remove subnet A
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_vpc_subnet:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    state: absent
    vpc_id: '{{ testing_vpc.vpc.id }}'
    cidr: 10.22.32.0/24
- name: remove subnet B
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_vpc_subnet:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    state: absent
    vpc_id: '{{ testing_vpc.vpc.id }}'
    cidr: 10.22.33.0/24
- name: remove the VPC
  register: removed
  until: removed is not failed
  ignore_errors: true
  retries: 10
  ansible.amazon.ec2_vpc_net:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
    region: '{{ aws_region }}'
    name: '{{ resource_prefix }}-vpc'
    cidr_block: 10.22.32.0/23
    state: absent
    tags:
      Name: Ansible Testing VPC
    tenancy: default
