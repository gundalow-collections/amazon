- name: set up aws connection info
  set_fact:
    aws_connection_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
  no_log: true
- block:
  - name: Create temporary directory
    register: tmpdir
    ansible.unix.tempfile:
      state: directory
  - name: Create content
    set_fact:
      content: '{{ lookup(''password'', ''/dev/null chars=ascii_letters,digits,hexdigits,punctuation'')
        }}'
  - name: test create bucket without permissions
    register: result
    ignore_errors: true
    ansible.amazon.aws_s3:
      bucket: '{{ bucket_name }}'
      mode: create
  - assert:
      that:
      - result is failed
      - result.msg != 'MODULE FAILURE'
  - name: test create bucket
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: create
  - assert:
      that:
      - result is changed
  - name: trying to create a bucket name that already exists
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: create
  - assert:
      that:
      - result is not changed
  - name: Create local upload.txt
    copy:
      content: '{{ content }}'
      dest: '{{ tmpdir.path }}/upload.txt'
  - name: stat the file
    stat:
      path: '{{ tmpdir.path }}/upload.txt'
      get_checksum: true
    register: upload_file
  - name: test putting an object in the bucket
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      object: delete.txt
  - assert:
      that:
      - result is changed
      - result.msg == "PUT operation complete"
  - name: test using aws_s3 with async
    register: test_async
    async: 30
    poll: 0
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      object: delete.txt
  - name: ensure it completed
    async_status:
      jid: '{{ test_async.ansible_job_id }}'
    register: status
    until: status is finished
    retries: 10
  - name: test put with overwrite=different and unmodified object
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      object: delete.txt
      overwrite: different
  - assert:
      that:
      - result is not changed
  - name: check that roles file lookups work as expected
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: hello.txt
      object: delete.txt
  - assert:
      that:
      - result is changed
      - result.msg == "PUT operation complete"
  - name: test put with overwrite=never
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      object: delete.txt
      overwrite: never
  - assert:
      that:
      - result is not changed
  - name: test put with overwrite=different and modified object
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      object: delete.txt
      overwrite: different
  - assert:
      that:
      - result is changed
  - name: test put with overwrite=always
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      object: delete.txt
      overwrite: always
  - assert:
      that:
      - result is changed
  - name: test get object
    retries: 3
    delay: 3
    register: result
    until: result.msg == 'GET operation complete'
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download.txt'
      object: delete.txt
  - name: stat the file so we can compare the checksums
    stat:
      path: '{{ tmpdir.path }}/download.txt'
      get_checksum: true
    register: download_file
  - assert:
      that:
      - upload_file.stat.checksum == download_file.stat.checksum
  - name: test get with overwrite=different and identical files
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download.txt'
      object: delete.txt
      overwrite: different
  - assert:
      that:
      - result is not changed
  - name: modify destination
    copy:
      dest: '{{ tmpdir.path }}/download.txt'
      src: hello.txt
  - name: test get with overwrite=never
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download.txt'
      object: delete.txt
      overwrite: never
  - assert:
      that:
      - result is not changed
  - name: test get with overwrite=different and modified file
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download.txt'
      object: delete.txt
      overwrite: different
  - assert:
      that:
      - result is changed
  - name: test get with overwrite=always
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download.txt'
      object: delete.txt
      overwrite: always
  - assert:
      that:
      - result is changed
  - name: test geturl of the object
    retries: 3
    delay: 3
    register: result
    until: result is changed
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: geturl
      object: delete.txt
  - assert:
      that:
      - '''Download url:'' in result.msg'
      - result is changed
  - name: test getstr of the object
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: getstr
      object: delete.txt
  - assert:
      that:
      - result.msg == "GET operation complete"
      - result.contents == content
  - name: test list to get all objects in the bucket
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: list
  - assert:
      that:
      - '''delete.txt'' in result.s3_keys'
      - result.msg == "LIST operation complete"
  - name: test delobj to just delete an object in the bucket
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delobj
      object: delete.txt
  - assert:
      that:
      - '''Object deleted from bucket'' in result.msg'
      - result is changed
  - name: test putting an encrypted object in the bucket
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      encrypt: true
      object: delete_encrypt.txt
  - assert:
      that:
      - result is changed
      - result.msg == "PUT operation complete"
  - name: test get encrypted object
    retries: 3
    delay: 3
    register: result
    until: result.msg == 'GET operation complete'
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download_encrypted.txt'
      object: delete_encrypt.txt
  - name: stat the file so we can compare the checksums
    stat:
      path: '{{ tmpdir.path }}/download_encrypted.txt'
      get_checksum: true
    register: download_file
  - assert:
      that:
      - upload_file.stat.checksum == download_file.stat.checksum
  - name: delete encrypted file
    retries: 3
    delay: 3
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delobj
      object: delete_encrypt.txt
  - name: test putting an aws:kms encrypted object in the bucket
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: put
      src: '{{ tmpdir.path }}/upload.txt'
      encrypt: true
      encryption_mode: aws:kms
      object: delete_encrypt_kms.txt
  - assert:
      that:
      - result is changed
      - result.msg == "PUT operation complete"
  - name: test get KMS encrypted object
    retries: 3
    delay: 3
    register: result
    until: result.msg == 'GET operation complete'
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: get
      dest: '{{ tmpdir.path }}/download_kms.txt'
      object: delete_encrypt_kms.txt
  - name: get the stat of the file so we can compare the checksums
    stat:
      path: '{{ tmpdir.path }}/download_kms.txt'
      get_checksum: true
    register: download_file
  - assert:
      that:
      - upload_file.stat.checksum == download_file.stat.checksum
  - name: delete KMS encrypted file
    retries: 3
    delay: 3
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delobj
      object: delete_encrypt_kms.txt
  - name: test creation of empty path
    retries: 3
    delay: 3
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: create
      object: foo/bar/baz/
  - assert:
      that:
      - '''Virtual directory foo/bar/baz/ created'' in result.msg'
      - result is changed
  - name: test deletion of empty path
    retries: 3
    delay: 3
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delobj
      object: foo/bar/baz/
  - name: test delete bucket
    register: result
    retries: 3
    delay: 3
    until: result is changed
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delete
  - assert:
      that:
      - result is changed
  - name: test create a bucket with a dot in the name
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name + ''.bucket'' }}'
      mode: create
  - assert:
      that:
      - result is changed
  - name: test delete a bucket with a dot in the name
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name + ''.bucket'' }}'
      mode: delete
  - assert:
      that:
      - result is changed
  - name: test delete a nonexistent bucket
    register: result
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name + ''.bucket'' }}'
      mode: delete
  - assert:
      that:
      - result is not changed
  - name: make tempfile 4 GB for OSX
    command:
      _raw_params: dd if=/dev/zero of={{ tmpdir.path }}/largefile bs=1m count=4096
    when: ansible_distribution == 'MacOSX'
  - name: make tempfile 4 GB for linux
    command:
      _raw_params: dd if=/dev/zero of={{ tmpdir.path }}/largefile bs=1M count=4096
    when: ansible_system == 'Linux'
  - name: test multipart download - platform specific
    block:
    - name: make a bucket to upload the file
      ansible.amazon.aws_s3:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        bucket: '{{ bucket_name }}'
        mode: create
    - name: upload the file to the bucket
      ansible.amazon.aws_s3:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        bucket: '{{ bucket_name }}'
        mode: put
        src: '{{ tmpdir.path }}/largefile'
        object: multipart.txt
    - name: download file once
      retries: 3
      delay: 3
      until: result.msg == 'GET operation complete'
      register: result
      ansible.amazon.aws_s3:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        bucket: '{{ bucket_name }}'
        mode: get
        dest: '{{ tmpdir.path }}/download.txt'
        object: multipart.txt
        overwrite: different
    - assert:
        that:
        - result is changed
    - name: download file again
      register: result
      ansible.amazon.aws_s3:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        bucket: '{{ bucket_name }}'
        mode: get
        dest: '{{ tmpdir.path }}/download.txt'
        object: multipart.txt
        overwrite: different
    - assert:
        that:
        - result is not changed
    when: ansible_system == 'Linux' or ansible_distribution == 'MacOSX'
  always:
  - name: remove uploaded files
    loop:
    - hello.txt
    - delete.txt
    - delete_encrypt.txt
    - delete_encrypt_kms.txt
    ignore_errors: true
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delobj
      object: '{{ item }}'
  - name: delete temporary files
    file:
      state: absent
      path: '{{ tmpdir.path }}'
    ignore_errors: true
  - name: delete the bucket
    ignore_errors: true
    ansible.amazon.aws_s3:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      bucket: '{{ bucket_name }}'
      mode: delete
