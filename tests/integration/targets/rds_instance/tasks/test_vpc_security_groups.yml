- block:
  - name: set up aws connection info
    set_fact:
      aws_connection_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
    no_log: true
  - name: create a VPC
    register: vpc_result
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}-vpc'
      state: present
      cidr_block: 10.122.122.128/26
      tags:
        Name: '{{ resource_prefix }}-vpc'
        Description: created by rds_instance integration tests
  - name: create subnets
    register: subnets_result
    loop:
    - cidr: 10.122.122.128/28
      zone: '{{ aws_region }}a'
    - cidr: 10.122.122.144/28
      zone: '{{ aws_region }}b'
    - cidr: 10.122.122.160/28
      zone: '{{ aws_region }}c'
    - cidr: 10.122.122.176/28
      zone: '{{ aws_region }}d'
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr: '{{ item.cidr }}'
      az: '{{ item.zone }}'
      vpc_id: '{{ vpc_result.vpc.id }}'
      tags:
        Name: '{{ resource_prefix }}-subnet'
        Description: created by rds_instance integration tests
      state: present
  - name: Create security groups
    register: sgs_result
    loop:
    - '{{ resource_prefix }}-sg-1'
    - '{{ resource_prefix }}-sg-2'
    - '{{ resource_prefix }}-sg-3'
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ item }}'
      description: created by rds_instance integration tests
      state: present
  - debug: var=sgs_result
  - name: Ensure the resource doesn't exist
    register: result
    ansible.amazon.rds_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      id: '{{ instance_id }}'
      state: absent
      skip_final_snapshot: true
  - assert:
      that:
      - not result.changed
    ignore_errors: true
  - name: Create a DB instance in the VPC with two security groups
    register: result
    ansible.amazon.rds_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      id: '{{ instance_id }}'
      state: present
      engine: mariadb
      username: '{{ username }}'
      password: '{{ password }}'
      db_instance_class: '{{ db_instance_class }}'
      allocated_storage: '{{ allocated_storage }}'
      vpc_security_group_ids:
      - '{{ sgs_result.results.0.group_id }}'
      - '{{ sgs_result.results.1.group_id }}'
  - assert:
      that:
      - result.changed
      - result.db_instance_identifier == '{{ instance_id }}'
  - name: Add a new security group
    register: result
    ansible.amazon.rds_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      id: '{{ instance_id }}'
      state: present
      vpc_security_group_ids:
      - '{{ sgs_result.results.2.group_id }}'
  - assert:
      that:
      - result.changed
  always:
  - name: Ensure the resource doesn't exist
    register: result
    ignore_errors: true
    ansible.amazon.rds_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      id: '{{ instance_id }}'
      state: absent
      skip_final_snapshot: true
  - name: Remove security groups
    register: sgs_result
    loop:
    - '{{ resource_prefix }}-sg-1'
    - '{{ resource_prefix }}-sg-2'
    - '{{ resource_prefix }}-sg-3'
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ item }}'
      description: created by rds_instance integration tests
      state: absent
  - name: remove subnets
    register: subnets
    ignore_errors: true
    retries: 30
    until: subnets is not failed
    delay: 10
    loop:
    - cidr: 10.122.122.128/28
      zone: '{{ aws_region }}a'
    - cidr: 10.122.122.144/28
      zone: '{{ aws_region }}b'
    - cidr: 10.122.122.160/28
      zone: '{{ aws_region }}c'
    - cidr: 10.122.122.176/28
      zone: '{{ aws_region }}d'
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr: '{{ item.cidr }}'
      az: '{{ item.zone }}'
      vpc_id: '{{ vpc_result.vpc.id }}'
      tags:
        Name: '{{ resource_prefix }}-subnet'
        Description: created by rds_instance integration tests
      state: absent
  - name: create a VPC
    register: vpc_result
    ignore_errors: true
    retries: 30
    until: vpc_result is not failed
    delay: 10
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}-vpc'
      state: absent
      cidr_block: 10.122.122.128/26
      tags:
        Name: '{{ resource_prefix }}-vpc'
        Description: created by rds_instance integration tests
  - name: Ensure the resource doesn't exist
    register: result
    ignore_errors: true
    ansible.amazon.rds_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      id: '{{ instance_id }}'
      state: absent
      skip_final_snapshot: true
