- block:
  - name: set connection information for all tasks
    set_fact:
      aws_connection_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
    no_log: true
  - name: create certificate
    register: cert
    ansible.amazon.iam_cert:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: test_cert
      state: present
      cert: '{{ lookup(''file'', ''cert.pem'') }}'
      key: '{{ lookup(''file'', ''key.pem'') }}'
  - name: create VPC
    register: vpc
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr_block: 10.228.228.0/22
      name: '{{ resource_prefix }}_vpc'
      state: present
  - name: create internet gateway
    register: igw
    ansible.amazon.ec2_vpc_igw:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
      tags:
        Name: '{{ resource_prefix }}'
  - name: create subnets
    with_items:
    - cidr: 10.228.228.0/24
      az: a
      public: true
    - cidr: 10.228.229.0/24
      az: b
      public: true
    - cidr: 10.228.230.0/24
      az: a
      public: false
    - cidr: 10.228.231.0/24
      az: b
      public: false
    register: subnets
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr: '{{ item.cidr }}'
      az: '{{ aws_region}}{{ item.az }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
      tags:
        Created_By: '{{ resource_prefix }}'
        Public: '{{ item.public }}'
  - register: vpc_subnets
    ansible.amazon.ec2_vpc_subnet_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      filters:
        vpc-id: '{{ vpc.vpc.id }}'
  - name: create list of subnet ids
    set_fact:
      nlb_subnets: '{{ vpc_subnets|json_query(''subnets[?tags.Public == `True`].id'')
        }}'
      private_subnets: '{{ vpc_subnets|json_query(''subnets[?tags.Public != `True`].id'')
        }}'
  - name: create a route table
    register: route_table
    ansible.amazon.ec2_vpc_route_table:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Name: igw-route
        Created: '{{ resource_prefix }}'
      subnets: '{{ nlb_subnets + private_subnets }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: '{{ igw.gateway_id }}'
  - register: sec_group
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}'
      description: security group for Ansible NLB integration tests
      state: present
      vpc_id: '{{ vpc.vpc.id }}'
      rules:
      - proto: tcp
        from_port: 1
        to_port: 65535
        cidr_ip: 0.0.0.0/0
      - proto: all
        ports: 80
        cidr_ip: 10.228.228.0/22
  - name: create a target group for testing
    register: tg
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ tg_name }}'
      protocol: tcp
      port: 80
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
  - include_tasks: test_nlb_bad_listener_options.yml
  - include_tasks: test_nlb_tags.yml
  - include_tasks: test_creating_nlb.yml
  - include_tasks: test_nlb_with_asg.yml
  - include_tasks: test_modifying_nlb_listeners.yml
  - include_tasks: test_deleting_nlb.yml
  always:
  - name: destroy NLB
    ignore_errors: true
    ansible.amazon.elb_network_lb:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ nlb_name }}'
      state: absent
      wait: true
      wait_timeout: 600
  - name: destroy target group if it was created
    register: remove_tg
    retries: 5
    delay: 3
    until: remove_tg is success
    when: tg is defined
    ignore_errors: true
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ tg_name }}'
      protocol: tcp
      port: 80
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
      wait: true
      wait_timeout: 600
  - name: destroy sec group
    register: remove_sg
    retries: 10
    delay: 5
    until: remove_sg is success
    ignore_errors: true
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ sec_group.group_name }}'
      description: security group for Ansible NLB integration tests
      state: absent
      vpc_id: '{{ vpc.vpc.id }}'
  - name: remove route table
    register: remove_rt
    retries: 10
    delay: 5
    until: remove_rt is success
    ignore_errors: true
    ansible.amazon.ec2_vpc_route_table:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      route_table_id: '{{ route_table.route_table.route_table_id }}'
      lookup: id
      state: absent
  - name: destroy subnets
    register: remove_subnet
    retries: 10
    delay: 5
    until: remove_subnet is success
    with_items:
    - cidr: 10.228.228.0/24
    - cidr: 10.228.229.0/24
    - cidr: 10.228.230.0/24
    - cidr: 10.228.231.0/24
    ignore_errors: true
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr: '{{ item.cidr }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
  - name: destroy internet gateway
    register: remove_igw
    retries: 10
    delay: 5
    until: remove_igw is success
    ignore_errors: true
    ansible.amazon.ec2_vpc_igw:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Name: '{{ resource_prefix }}'
      state: absent
  - name: destroy VPC
    register: remove_vpc
    retries: 10
    delay: 5
    until: remove_vpc is success
    ignore_errors: true
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr_block: 10.228.228.0/22
      name: '{{ resource_prefix }}_vpc'
      state: absent
  - name: destroy certificate
    ignore_errors: true
    ansible.amazon.iam_cert:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: test_cert
      state: absent
