- block:
  - name: test with no parameters
    register: result
    ignore_errors: true
    ansible.amazon.aws_api_gateway: null
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - result.msg.startswith("The aws_api_gateway module requires a region")
  - name: test with minimal parameters but no region
    register: result
    ignore_errors: true
    ansible.amazon.aws_api_gateway:
      api_id: fake-api-doesnt-exist
  - name: assert failure when called with with minimal parameters but no region
    assert:
      that:
      - result.failed
      - result.msg.startswith("The aws_api_gateway module requires a region")
  - name: test disallow multiple swagger sources
    register: result
    ignore_errors: true
    ansible.amazon.aws_api_gateway:
      api_id: fake-api-doesnt-exist
      region: fake_region
      swagger_file: foo.yml
      swagger_text: this is not really an API
  - name: assert failure when called with with minimal parameters but no region
    assert:
      that:
      - result.failed
      - result.msg.startswith("parameters are mutually exclusive")
  - name: build API file
    template:
      src: minimal-swagger-api.yml.j2
      dest: '{{output_dir}}/minimal-swagger-api.yml'
    tags: new_api,api,api_file
  - name: deploy new API
    register: create_result
    ansible.amazon.aws_api_gateway:
      api_file: '{{output_dir}}/minimal-swagger-api.yml'
      stage: minimal
      region: '{{ec2_region}}'
      aws_access_key: '{{ec2_access_key}}'
      aws_secret_key: '{{ec2_secret_key}}'
      security_token: '{{security_token}}'
  - name: assert deploy new API worked
    assert:
      that:
      - create_result.changed == True
      - '"api_id" in create_result'
  - name: check API works
    uri: url="https://{{create_result.api_id}}.execute-api.{{ec2_region}}.amazonaws.com/minimal"
    register: uri_result
  - name: assert API works success
    assert:
      that:
      - uri_result
  - name: check nonexistent endpoints cause errors
    uri: url="https://{{create_result.api_id}}.execute-api.{{ec2_region}}.amazonaws.com/nominal"
    register: bad_uri_result
    ignore_errors: true
  - name: assert
    assert:
      that:
      - bad_uri_result is failed
  - name: deploy first API
    register: create_result_1
    ansible.amazon.aws_api_gateway:
      api_file: '{{output_dir}}/minimal-swagger-api.yml'
      stage: minimal
      region: '{{ec2_region}}'
      aws_access_key: '{{ec2_access_key}}'
      aws_secret_key: '{{ec2_secret_key}}'
      security_token: '{{security_token}}'
  - name: deploy second API rapidly after first
    register: create_result_2
    ansible.amazon.aws_api_gateway:
      api_file: '{{output_dir}}/minimal-swagger-api.yml'
      stage: minimal
      region: '{{ec2_region}}'
      aws_access_key: '{{ec2_access_key}}'
      aws_secret_key: '{{ec2_secret_key}}'
      security_token: '{{security_token}}'
  - name: assert both APIs deployed successfully
    assert:
      that:
      - create_result_1.changed == True
      - create_result_2.changed == True
      - '"api_id" in create_result_1'
      - '"api_id" in create_result_1'
  - name: destroy first API
    register: destroy_result_1
    ansible.amazon.aws_api_gateway:
      state: absent
      api_id: '{{create_result_1.api_id}}'
      region: '{{ec2_region}}'
      aws_access_key: '{{ec2_access_key}}'
      aws_secret_key: '{{ec2_secret_key}}'
      security_token: '{{security_token}}'
  - name: destroy second API rapidly after first
    register: destroy_result_2
    ansible.amazon.aws_api_gateway:
      state: absent
      api_id: '{{create_result_2.api_id}}'
      region: '{{ec2_region}}'
      aws_access_key: '{{ec2_access_key}}'
      aws_secret_key: '{{ec2_secret_key}}'
      security_token: '{{security_token}}'
  - name: assert both APIs deployed successfully
    assert:
      that:
      - destroy_result_1.changed == True
      - destroy_result_2.changed == True
  always:
  - name: test state=absent (expect changed=false)
    register: destroy_result
    ansible.amazon.aws_api_gateway:
      state: absent
      api_id: '{{create_result.api_id}}'
      ec2_region: '{{ec2_region}}'
      aws_access_key: '{{ec2_access_key}}'
      aws_secret_key: '{{ec2_secret_key}}'
      security_token: '{{security_token}}'
