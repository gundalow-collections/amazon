- block:
  - name: test with no parameters
    register: result
    ignore_errors: true
    ansible.amazon.ec2_key: null
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - 'result.msg == "missing required arguments: name"'
  - name: test removing a non-existent key pair
    register: result
    ansible.amazon.ec2_key: name='{{ec2_key_name}}' ec2_region={{ec2_region}} ec2_access_key={{ec2_access_key}}
      ec2_secret_key={{ec2_secret_key}} security_token={{security_token}} state=absent
  - name: assert removing a non-existent key pair
    assert:
      that:
      - not result.changed
  - name: test creating a new key pair
    register: result
    ansible.amazon.ec2_key: name='{{ec2_key_name}}' ec2_region={{ec2_region}} ec2_access_key={{ec2_access_key}}
      ec2_secret_key={{ec2_secret_key}} security_token={{security_token}} state=present
  - name: assert creating a new key pair
    assert:
      that:
      - result.changed
      - '"key" in result'
      - '"name" in result.key'
      - '"fingerprint" in result.key'
      - '"private_key" in result.key'
      - result.key.name == "{{ec2_key_name}}"
  - name: test removing an existent key
    environment:
      EC2_REGION: '{{ec2_region}}'
      EC2_ACCESS_KEY: '{{ec2_access_key}}'
      EC2_SECRET_KEY: '{{ec2_secret_key}}'
      EC2_SECURITY_TOKEN: '{{security_token|default("")}}'
    register: result
    ansible.amazon.ec2_key: name='{{ec2_key_name}}' state=absent
  - name: assert removing an existent key
    assert:
      that:
      - result.changed
      - '"key" in result'
      - result.key == None
  - name: test state=present with key_material
    environment:
      EC2_REGION: '{{ec2_region}}'
      EC2_ACCESS_KEY: '{{ec2_access_key}}'
      EC2_SECRET_KEY: '{{ec2_secret_key}}'
      EC2_SECURITY_TOKEN: '{{security_token|default("")}}'
    register: result
    ansible.amazon.ec2_key: name='{{ec2_key_name}}' key_material='{{key_material}}'
      state=present
  - name: assert state=present with key_material
    assert:
      that:
      - result.changed == True
      - '"key" in result'
      - '"name" in result.key'
      - '"fingerprint" in result.key'
      - '"private_key" not in result.key'
      - result.key.name == "{{ec2_key_name}}"
      - result.key.fingerprint == "{{fingerprint}}"
  - name: test force=no with another_key_material (expect changed=false)
    register: result
    ansible.amazon.ec2_key:
      name: '{{ ec2_key_name }}'
      ec2_region: '{{ ec2_region }}'
      ec2_access_key: '{{ ec2_access_key }}'
      ec2_secret_key: '{{ ec2_secret_key }}'
      security_token: '{{ security_token }}'
      key_material: '{{ another_key_material }}'
      force: false
  - name: assert force=no with another_key_material (expect changed=false)
    assert:
      that:
      - not result.changed
      - result.key.fingerprint == "{{ fingerprint }}"
  - name: test updating a key pair using another_key_material (expect changed=True)
    register: result
    ansible.amazon.ec2_key:
      name: '{{ ec2_key_name }}'
      ec2_region: '{{ ec2_region }}'
      ec2_access_key: '{{ ec2_access_key }}'
      ec2_secret_key: '{{ ec2_secret_key }}'
      security_token: '{{ security_token }}'
      key_material: '{{ another_key_material }}'
  - name: assert updating a key pair using another_key_material (expect changed=True)
    assert:
      that:
      - result.changed
      - result.key.fingerprint != "{{ fingerprint }}"
  always:
  - name: test state=absent (expect changed=true)
    register: result
    ansible.amazon.ec2_key: name='{{ec2_key_name}}' ec2_region='{{ec2_region}}' ec2_access_key='{{ec2_access_key}}'
      ec2_secret_key='{{ec2_secret_key}}' security_token='{{security_token}}' state=absent
  - name: assert state=absent with key_material (expect changed=true)
    assert:
      that:
      - result.changed
      - '"key" in result'
      - result.key == None
