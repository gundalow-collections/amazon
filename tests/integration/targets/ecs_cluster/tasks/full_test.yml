- block:
  - name: set up aws connection info
    set_fact:
      aws_connection_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
    no_log: true
  - name: ensure IAM instance role exists
    ansible.amazon.iam_role:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: ecsInstanceRole
      assume_role_policy_document: '{{ lookup(''file'',''ec2-trust-policy.json'')
        }}'
      state: present
      create_instance_profile: true
      managed_policy:
      - AmazonEC2ContainerServiceforEC2Role
  - name: ensure IAM service role exists
    ansible.amazon.iam_role:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: ecsServiceRole
      assume_role_policy_document: '{{ lookup(''file'',''ecs-trust-policy.json'')
        }}'
      state: present
      create_instance_profile: false
      managed_policy:
      - AmazonEC2ContainerServiceRole
  - name: ensure AWSServiceRoleForECS role exists
    register: iam_role_result
    ansible.amazon.iam_role_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: AWSServiceRoleForECS
  - name: fail if AWSServiceRoleForECS role does not exist
    fail:
      msg: 'Run `aws iam create-service-linked-role --aws-service-name=ecs.amazonaws.com
        ` to create a linked role for AWS VPC load balancer management

        '
    when: not iam_role_result.iam_roles
  - name: create an ECS cluster
    register: ecs_cluster
    ansible.amazon.ecs_cluster:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_cluster_name }}'
      state: present
  - name: check that ecs_cluster changed
    assert:
      that:
      - ecs_cluster.changed
  - name: create same ECS cluster (should do nothing)
    register: ecs_cluster_again
    ansible.amazon.ecs_cluster:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_cluster_name }}'
      state: present
  - name: check that ecs_cluster did not change
    assert:
      that:
      - not ecs_cluster_again.changed
  - name: create a VPC to work in
    register: setup_vpc
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr_block: 10.0.0.0/16
      state: present
      name: '{{ resource_prefix }}_ecs_cluster'
      resource_tags:
        Name: '{{ resource_prefix }}_ecs_cluster'
  - name: create a key pair to use for creating an ec2 instance
    when: ec2_keypair is not defined
    register: setup_key
    ansible.amazon.ec2_key:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}_ecs_cluster'
      state: present
  - name: create subnets
    register: setup_subnet
    with_items:
    - zone: a
      cidr: 10.0.1.0/24
    - zone: b
      cidr: 10.0.2.0/24
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      az: '{{ ec2_region }}{{ item.zone }}'
      tags:
        Name: '{{ resource_prefix }}_ecs_cluster-subnet-{{ item.zone }}'
      vpc_id: '{{ setup_vpc.vpc.id }}'
      cidr: '{{ item.cidr }}'
      state: present
  - name: create an internet gateway so that ECS agents can talk to ECS
    register: igw
    ansible.amazon.ec2_vpc_igw:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ setup_vpc.vpc.id }}'
      state: present
  - name: create a security group to use for creating an ec2 instance
    register: setup_sg
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}_ecs_cluster-sg'
      description: created by Ansible integration tests
      state: present
      vpc_id: '{{ setup_vpc.vpc.id }}'
      rules:
      - ports: 22
        cidr: 0.0.0.0/0
  - name: find a suitable AMI
    register: ec2_ami_info
    ansible.amazon.ec2_ami_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      owner: amazon
      filters:
        description: Amazon Linux AMI* ECS *
  - name: set image id fact
    set_fact:
      ecs_image_id: '{{ (ec2_ami_info.images|first).image_id }}'
  - name: provision ec2 instance to create an image
    register: setup_instance
    ansible.amazon.ec2_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      key_name: '{{ ec2_keypair|default(setup_key.key.name) }}'
      instance_type: t2.micro
      state: present
      image_id: '{{ ecs_image_id }}'
      wait: true
      user_data: '{{ user_data }}'
      instance_role: ecsInstanceRole
      tags:
        Name: '{{ resource_prefix }}_ecs_agent'
      security_group: '{{ setup_sg.group_id }}'
      vpc_subnet_id: '{{ setup_subnet.results[0].subnet.id }}'
  - name: create target group
    register: elb_target_group_instance
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_target_group_name }}1'
      state: present
      protocol: HTTP
      port: 8080
      modify_targets: false
      vpc_id: '{{ setup_vpc.vpc.id }}'
      target_type: instance
  - name: create second target group to use ip target_type
    register: elb_target_group_ip
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_target_group_name }}2'
      state: present
      protocol: HTTP
      port: 8080
      modify_targets: false
      vpc_id: '{{ setup_vpc.vpc.id }}'
      target_type: ip
  - name: create load balancer
    ansible.amazon.elb_application_lb:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_load_balancer_name }}'
      state: present
      scheme: internal
      security_groups: '{{ setup_sg.group_id }}'
      subnets: '{{ setup_subnet.results | json_query(''[].subnet.id'') }}'
      listeners:
      - Protocol: HTTP
        Port: 80
        DefaultActions:
        - Type: forward
          TargetGroupName: '{{ ecs_target_group_name }}1'
      - Protocol: HTTP
        Port: 81
        DefaultActions:
        - Type: forward
          TargetGroupName: '{{ ecs_target_group_name }}2'
  - name: create task definition
    register: ecs_task_definition
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}'
      state: present
  - name: recreate task definition
    register: ecs_task_definition_again
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}'
      state: present
  - name: check that task definition does not change
    assert:
      that:
      - not ecs_task_definition_again.changed
    ignore_errors: true
  - name: obtain ECS task definition facts
    ansible.amazon.ecs_taskdefinition_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
  - name: create ECS service definition
    register: ecs_service
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      health_check_grace_period_seconds: '{{ ecs_service_health_check_grace_period
        }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      role: ecsServiceRole
  - name: check that ECS service creation changed
    assert:
      that:
      - ecs_service.changed
  - name: create same ECS service definition (should not change)
    register: ecs_service_again
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      health_check_grace_period_seconds: '{{ ecs_service_health_check_grace_period
        }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      role: ecsServiceRole
  - name: check that ECS service recreation changed nothing
    assert:
      that:
      - not ecs_service_again.changed
    ignore_errors: true
  - name: update ECS service definition (expected to fail)
    register: update_ecs_service
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      health_check_grace_period_seconds: '{{ ecs_service_health_check_grace_period
        }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port|int + 1 }}'
      role: ecsServiceRole
  - name: assert that updating ECS load balancer failed with helpful message
    assert:
      that:
      - update_ecs_service is failed
      - '''error'' not in update_ecs_service'
      - '''msg'' in update_ecs_service'
  - name: attempt to use ECS network configuration on task definition without awsvpc
      network_mode
    register: ecs_service_network_without_awsvpc_task
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}3'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      network_configuration:
        subnets: '{{ setup_subnet.results | json_query(''[].subnet.id'') }}'
        security_groups:
        - '{{ setup_sg.group_id }}'
  - name: assert that using ECS network configuration with non AWSVPC task definition
      fails
    assert:
      that:
      - ecs_service_network_without_awsvpc_task is failed
  - name: scale down ECS service
    register: ecs_service_scale_down
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 0
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      role: ecsServiceRole
  - name: pause to allow service to scale down
    pause:
      seconds: 60
  - name: delete ECS service definition
    register: delete_ecs_service
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      name: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
  - name: assert that deleting ECS service worked
    assert:
      that:
      - delete_ecs_service.changed
  - name: assert that deleting ECS service worked
    assert:
      that:
      - delete_ecs_service.changed
  - name: create VPC-networked task definition with host port set to 0 (expected to
      fail)
    register: ecs_task_definition_vpc_no_host_port
    ignore_errors: true
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      state: present
      network_mode: awsvpc
  - name: check that awsvpc task definition with host port 0 fails gracefully
    assert:
      that:
      - ecs_task_definition_vpc_no_host_port is failed
      - '''error'' not in ecs_task_definition_vpc_no_host_port'
  - name: create VPC-networked task definition with host port set to 8080
    vars:
      ecs_task_host_port: 8080
    register: ecs_task_definition_vpc_with_host_port
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      network_mode: awsvpc
      state: present
  - name: obtain ECS task definition facts
    register: ecs_taskdefinition_info
    ansible.amazon.ecs_taskdefinition_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_task_definition_vpc_with_host_port.taskdefinition.revision
        }}'
  - name: assert that network mode is awsvpc
    assert:
      that:
      - ecs_taskdefinition_info.network_mode == 'awsvpc'
  - name: pause to allow service to scale down
    pause:
      seconds: 60
  - name: delete ECS service definition
    register: delete_ecs_service
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      name: '{{ ecs_service_name }}4'
      cluster: '{{ ecs_cluster_name }}'
  - name: create ECS service definition with network configuration
    register: create_ecs_service_with_vpc
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}2'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_task_definition_vpc_with_host_port.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_ip.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      network_configuration:
        subnets: '{{ setup_subnet.results | json_query(''[].subnet.id'') }}'
        security_groups:
        - '{{ setup_sg.group_id }}'
  - name: assert that network configuration is correct
    assert:
      that:
      - '''networkConfiguration'' in create_ecs_service_with_vpc.service'
      - '''awsvpcConfiguration'' in create_ecs_service_with_vpc.service.networkConfiguration'
      - create_ecs_service_with_vpc.service.networkConfiguration.awsvpcConfiguration.subnets|length
        == 2
      - create_ecs_service_with_vpc.service.networkConfiguration.awsvpcConfiguration.securityGroups|length
        == 1
  - name: create dummy group to update ECS service with
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}-ecs-vpc-test-sg'
      description: Test security group for ECS with VPC
      vpc_id: '{{ setup_vpc.vpc.id }}'
      state: present
  - name: update ECS service definition with new network configuration
    register: update_ecs_service_with_vpc
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}2'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_task_definition_vpc_with_host_port.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_ip.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      network_configuration:
        subnets: '{{ setup_subnet.results | json_query(''[].subnet.id'') }}'
        security_groups:
        - '{{ resource_prefix }}-ecs-vpc-test-sg'
  - name: check that ECS service changed
    assert:
      that:
      - update_ecs_service_with_vpc.changed
      - '''networkConfiguration'' in update_ecs_service_with_vpc.service'
      - '''awsvpcConfiguration'' in update_ecs_service_with_vpc.service.networkConfiguration'
      - update_ecs_service_with_vpc.service.networkConfiguration.awsvpcConfiguration.subnets|length
        == 2
      - update_ecs_service_with_vpc.service.networkConfiguration.awsvpcConfiguration.securityGroups|length
        == 1
  - name: create ecs_service using health_check_grace_period_seconds
    register: ecs_service_creation_hcgp
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_service_name }}-mft'
      cluster: '{{ ecs_cluster_name }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      scheduling_strategy: REPLICA
      health_check_grace_period_seconds: 10
      desired_count: 1
      state: present
  - name: health_check_grace_period_seconds sets HealthChecGracePeriodSeconds
    assert:
      that:
      - ecs_service_creation_hcgp.changed
      - '{{ecs_service_creation_hcgp.service.healthCheckGracePeriodSeconds}} == 10'
  - name: update ecs_service using health_check_grace_period_seconds
    register: ecs_service_creation_hcgp2
    ignore_errors: false
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_service_name }}-mft'
      cluster: '{{ ecs_cluster_name }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      health_check_grace_period_seconds: 30
      state: present
  - name: check that module returns success
    assert:
      that:
      - ecs_service_creation_hcgp2.changed
      - '{{ecs_service_creation_hcgp2.service.healthCheckGracePeriodSeconds}} == 30'
  - name: update ecs_service using REPLICA scheduling_strategy
    register: ecs_service_creation_replica
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_service_name }}-replica'
      cluster: '{{ ecs_cluster_name }}'
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      scheduling_strategy: REPLICA
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      state: present
  - name: obtain facts for all ECS services in the cluster
    register: ecs_service_info
    ansible.amazon.ecs_service_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cluster: '{{ ecs_cluster_name }}'
      details: true
      events: false
  - name: assert that facts are useful
    assert:
      that:
      - '''services'' in ecs_service_info'
      - ecs_service_info.services | length > 0
      - '''events'' not in ecs_service_info.services[0]'
  - name: obtain facts for existing service in the cluster
    register: ecs_service_info
    ansible.amazon.ecs_service_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cluster: '{{ ecs_cluster_name }}'
      service: '{{ ecs_service_name }}'
      details: true
      events: false
  - name: assert that existing service is available and running
    assert:
      that:
      - ecs_service_info.services|length == 1
      - ecs_service_info.services_not_running|length == 0
  - name: obtain facts for non-existent service in the cluster
    register: ecs_service_info
    ansible.amazon.ecs_service_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cluster: '{{ ecs_cluster_name }}'
      service: madeup
      details: true
      events: false
  - name: assert that non-existent service is missing
    assert:
      that:
      - ecs_service_info.services_not_running[0].reason == 'MISSING'
  - name: obtain specific ECS service facts
    register: ecs_service_info
    ansible.amazon.ecs_service_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      service: '{{ ecs_service_name }}2'
      cluster: '{{ ecs_cluster_name }}'
      details: true
  - name: check that facts contain network configuration
    assert:
      that:
      - '''networkConfiguration'' in ecs_service_info.ansible_facts.services[0]'
  - name: attempt to get facts from missing task definition
    ansible.amazon.ecs_taskdefinition_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_task_definition.taskdefinition.revision
        + 1}}'
  - name: ensure AmazonECSTaskExecutionRolePolicy exists
    register: iam_execution_role
    ansible.amazon.iam_role:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: ecsTaskExecutionRole
      assume_role_policy_document: '{{ lookup(''file'',''ecs-trust-policy.json'')
        }}'
      description: Allows ECS containers to make calls to ECR
      state: present
      create_instance_profile: false
      managed_policy:
      - AmazonEC2ContainerServiceRole
  - name: create Fargate VPC-networked task definition with host port set to 8080
      and unsupported network mode (expected to fail)
    vars:
      ecs_task_host_port: 8080
    ignore_errors: true
    register: ecs_fargate_task_definition_bridged_with_host_port
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_fargate_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      network_mode: bridge
      launch_type: FARGATE
      cpu: 512
      memory: 1024
      state: present
  - name: check that fargate task definition with bridged networking fails gracefully
    assert:
      that:
      - ecs_fargate_task_definition_bridged_with_host_port is failed
      - ecs_fargate_task_definition_bridged_with_host_port.msg == "To use FARGATE
        launch type, network_mode must be awsvpc"
  - name: create Fargate VPC-networked task definition without CPU or Memory (expected
      to Fail)
    ignore_errors: true
    register: ecs_fargate_task_definition_vpc_no_mem
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_fargate_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      network_mode: awsvpc
      launch_type: FARGATE
      state: present
  - name: check that fargate task definition without memory or cpu fails gracefully
    assert:
      that:
      - ecs_fargate_task_definition_vpc_no_mem is failed
      - 'ecs_fargate_task_definition_vpc_no_mem.msg == "launch_type is FARGATE but
        all of the following are missing: cpu, memory"'
  - name: create Fargate VPC-networked task definition with CPU or Memory and execution
      role
    vars:
      ecs_task_host_port: 8080
    register: ecs_fargate_task_definition
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_fargate_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      network_mode: awsvpc
      launch_type: FARGATE
      cpu: 512
      memory: 1024
      execution_role_arn: '{{ iam_execution_role.arn }}'
      state: present
  - name: obtain ECS task definition facts
    ansible.amazon.ecs_taskdefinition_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_fargate_task_definition.taskdefinition.revision
        }}'
  - name: create fargate ECS service without network config (expected to fail)
    register: ecs_fargate_service_network_without_awsvpc
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}4'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_fargate_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      launch_type: FARGATE
  - name: assert that using Fargate ECS service fails
    assert:
      that:
      - ecs_fargate_service_network_without_awsvpc is failed
  - name: create fargate ECS service with network config
    register: ecs_fargate_service_network_with_awsvpc
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}4'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_fargate_task_definition.taskdefinition.revision
        }}'
      desired_count: 1
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      launch_type: FARGATE
      network_configuration:
        subnets: '{{ setup_subnet.results | json_query(''[].subnet.id'') }}'
        security_groups:
        - '{{ setup_sg.group_id }}'
        assign_public_ip: true
  - name: create fargate ECS task with run task
    register: fargate_run_task_output
    ansible.amazon.ecs_task:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      operation: run
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}-vpc'
      launch_type: FARGATE
      count: 1
      network_configuration:
        subnets: '{{ setup_subnet.results | json_query(''[].subnet.id'') }}'
        security_groups:
        - '{{ setup_sg.group_id }}'
        assign_public_ip: true
      started_by: ansible_user
  - name: assert that public IP assignment is enabled
    assert:
      that:
      - ecs_fargate_service_network_with_awsvpc.service.networkConfiguration.awsvpcConfiguration.assignPublicIp
        == "ENABLED"
  - name: create task definition for absent with arn regression test
    register: ecs_task_definition_absent_with_arn
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}-absent'
      state: present
  - name: absent task definition by arn
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      arn: '{{ ecs_task_definition_absent_with_arn.taskdefinition.taskDefinitionArn
        }}'
      state: absent
  always:
  - name: Announce teardown start
    debug:
      msg: '***** TESTING COMPLETE. COMMENCE TEARDOWN *****'
  - name: obtain ECS service facts
    register: ecs_service_info
    ansible.amazon.ecs_service_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      service: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
      details: true
  - name: scale down ECS service
    ignore_errors: true
    register: ecs_service_scale_down
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_service_info.ansible_facts.services[0].taskDefinition
        }}'
      desired_count: 0
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      load_balancers:
      - targetGroupArn: '{{ ecs_service_info.ansible_facts.services[0].loadBalancers[0].targetGroupArn
          }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
  - name: obtain second ECS service facts
    ignore_errors: true
    register: ecs_service_info
    ansible.amazon.ecs_service_info:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      service: '{{ ecs_service_name }}2'
      cluster: '{{ ecs_cluster_name }}'
      details: true
  - name: scale down second ECS service
    ignore_errors: true
    register: ecs_service_scale_down
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}2'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_service_info.ansible_facts.services[0].taskDefinition
        }}'
      desired_count: 0
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
      placement_strategy: '{{ ecs_service_placement_strategy }}'
      load_balancers:
      - targetGroupArn: '{{ ecs_service_info.ansible_facts.services[0].loadBalancers[0].targetGroupArn
          }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
  - name: scale down multifunction-test service
    ignore_errors: true
    register: ecs_service_scale_down
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_service_name }}-mft'
      cluster: '{{ ecs_cluster_name }}'
      state: present
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 0
  - name: scale down scheduling_strategy service
    ignore_errors: true
    register: ecs_service_scale_down
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_service_name }}-replica'
      cluster: '{{ ecs_cluster_name }}'
      state: present
      load_balancers:
      - targetGroupArn: '{{ elb_target_group_instance.target_group_arn }}'
        containerName: '{{ ecs_task_name }}'
        containerPort: '{{ ecs_task_container_port }}'
      task_definition: '{{ ecs_task_name }}:{{ ecs_task_definition.taskdefinition.revision
        }}'
      desired_count: 0
  - name: scale down Fargate ECS service
    ignore_errors: true
    register: ecs_service_scale_down
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: present
      name: '{{ ecs_service_name }}4'
      cluster: '{{ ecs_cluster_name }}'
      task_definition: '{{ ecs_task_name }}-vpc:{{ ecs_fargate_task_definition.taskdefinition.revision
        }}'
      desired_count: 0
      deployment_configuration: '{{ ecs_service_deployment_configuration }}'
  - name: stop Fargate ECS task
    ignore_errors: true
    ansible.amazon.ecs_task:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      task: '{{ fargate_run_task_output.task[0].taskArn }}'
      task_definition: '{{ ecs_task_name }}-vpc'
      operation: stop
      cluster: '{{ ecs_cluster_name }}'
  - name: pause to allow services to scale down
    pause:
      seconds: 60
    when: ecs_service_scale_down is not failed
  - name: remove ecs service
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      cluster: '{{ ecs_cluster_name }}'
      name: '{{ ecs_service_name }}'
  - name: remove second ecs service
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      cluster: '{{ ecs_cluster_name }}'
      name: '{{ ecs_service_name }}2'
  - name: remove mft ecs service
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      cluster: '{{ ecs_cluster_name }}'
      name: '{{ ecs_service_name }}-mft'
  - name: remove scheduling_strategy ecs service
    ignore_errors: true
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      cluster: '{{ ecs_cluster_name }}'
      name: '{{ ecs_service_name }}-replica'
  - name: remove fargate ECS service
    ignore_errors: true
    register: ecs_fargate_service_network_with_awsvpc
    ansible.amazon.ecs_service:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      name: '{{ ecs_service_name }}4'
      cluster: '{{ ecs_cluster_name }}'
  - name: remove ecs task definition
    vars:
      ecs_task_host_port: 8080
    ignore_errors: true
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}'
      revision: '{{ ecs_task_definition.taskdefinition.revision }}'
      state: absent
  - name: remove ecs task definition again
    vars:
      ecs_task_host_port: 8080
    ignore_errors: true
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}'
      revision: '{{ ecs_task_definition_again.taskdefinition.revision }}'
      state: absent
  - name: remove second ecs task definition
    vars:
      ecs_task_host_port: 8080
    ignore_errors: true
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      revision: '{{ ecs_task_definition_vpc_with_host_port.taskdefinition.revision
        }}'
      state: absent
  - name: remove fargate ecs task definition
    ignore_errors: true
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_fargate_task_containers }}'
      family: '{{ ecs_task_name }}-vpc'
      revision: '{{ ecs_fargate_task_definition.taskdefinition.revision }}'
      state: absent
  - name: remove ecs task definition for absent with arn
    ignore_errors: true
    ansible.amazon.ecs_taskdefinition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      containers: '{{ ecs_task_containers }}'
      family: '{{ ecs_task_name }}-absent'
      revision: '{{ ecs_task_definition_absent_with_arn.taskdefinition.revision }}'
      state: absent
  - name: remove load balancer
    ignore_errors: true
    register: elb_application_lb_remove
    ansible.amazon.elb_application_lb:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_load_balancer_name }}'
      state: absent
      wait: true
  - name: pause to allow target group to be disassociated
    pause:
      seconds: 30
    when: not elb_application_lb_remove is failed
  - name: remove target groups
    with_items:
    - '{{ ecs_target_group_name }}1'
    - '{{ ecs_target_group_name }}2'
    ignore_errors: true
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ item }}'
      state: absent
  - name: remove setup ec2 instance
    ignore_errors: true
    ansible.amazon.ec2_instance:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      instance_ids: '{{ setup_instance.instance_ids }}'
      state: absent
      wait: true
  - name: remove setup keypair
    ignore_errors: true
    ansible.amazon.ec2_key:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}_ecs_cluster'
      state: absent
  - name: remove security groups
    with_items:
    - '{{ resource_prefix }}-ecs-vpc-test-sg'
    - '{{ resource_prefix }}_ecs_cluster-sg'
    ignore_errors: true
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ item }}'
      description: created by Ansible integration tests
      state: absent
      vpc_id: '{{ setup_vpc.vpc.id }}'
  - name: remove IGW
    ignore_errors: true
    ansible.amazon.ec2_vpc_igw:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      state: absent
      vpc_id: '{{ setup_vpc.vpc.id }}'
  - name: remove setup subnet
    with_items:
    - zone: a
      cidr: 10.0.1.0/24
    - zone: b
      cidr: 10.0.2.0/24
    ignore_errors: true
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      az: '{{ aws_region }}{{ item.zone }}'
      vpc_id: '{{ setup_vpc.vpc.id }}'
      cidr: '{{ item.cidr}}'
      state: absent
  - name: remove setup VPC
    ignore_errors: true
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr_block: 10.0.0.0/16
      state: absent
      name: '{{ resource_prefix }}_ecs_cluster'
  - name: remove ECS cluster
    ignore_errors: true
    ansible.amazon.ecs_cluster:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ ecs_cluster_name }}'
      state: absent
