- block:
  - name: set up aws connection info
    set_fact:
      aws_connection_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
    no_log: true
  - name: Create a temporary folder for the policies
    register: tmpdir
    ansible.unix.tempfile:
      state: directory
  - name: Copy over policy
    copy:
      src: no_access.json
      dest: '{{ tmpdir.path }}'
  - name: Copy over other policy
    copy:
      src: no_access_with_id.json
      dest: '{{ tmpdir.path }}'
  - name: Create user for tests
    ansible.amazon.iam_user:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ iam_user_name }}'
      state: present
  - name: Create role for tests
    ansible.amazon.iam_role:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ iam_role_name }}'
      assume_role_policy_document: '{{ lookup(''file'',''no_trust.json'') }}'
      state: present
  - name: Create group for tests
    ansible.amazon.iam_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ iam_group_name }}'
      state: present
  - name: Create policy for user
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: user
      iam_name: '{{ iam_user_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access.json'
  - name: Assert policy was added for user
    assert:
      that:
      - result.changed == True
      - result.policies == ["{{ iam_policy_name }}"]
      - result.user_name == "{{ iam_user_name }}"
  - name: Update policy for user
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: user
      iam_name: '{{ iam_user_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access_with_id.json'
  - name: Assert policy was updated for user
    assert:
      that:
      - result.changed == True
  - name: Update policy for user with same policy
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: user
      iam_name: '{{ iam_user_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access_with_id.json'
  - name: Assert policy did not change for user
    assert:
      that:
      - result.changed == False
  - name: Create policy for user using policy_json
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: user
      iam_name: '{{ iam_user_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_json: '{{ lookup(''file'', ''{{ tmpdir.path }}/no_access.json'') }}'
  - name: Assert policy was added for user
    assert:
      that:
      - result.changed == True
      - result.policies == ["{{ iam_policy_name }}"]
      - result.user_name == "{{ iam_user_name }}"
  - name: Create policy for role
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: role
      iam_name: '{{ iam_role_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access.json'
  - name: Assert policy was added for role
    assert:
      that:
      - result.changed == True
      - result.policies == ["{{ iam_policy_name }}"]
      - result.role_name == "{{ iam_role_name }}"
  - name: Update policy for role
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: role
      iam_name: '{{ iam_role_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access_with_id.json'
  - name: Assert policy was updated for role
    assert:
      that:
      - result.changed == True
  - name: Update policy for role with same policy
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: role
      iam_name: '{{ iam_role_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access_with_id.json'
  - name: Assert policy did not change for role
    assert:
      that:
      - result.changed == False
  - name: Create policy for role using policy_json
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: role
      iam_name: '{{ iam_role_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_json: '{{ lookup(''file'', ''{{ tmpdir.path }}/no_access.json'') }}'
  - name: Assert policy was added for role
    assert:
      that:
      - result.changed == True
      - result.policies == ["{{ iam_policy_name }}"]
      - result.role_name == "{{ iam_role_name }}"
  - name: Create policy for group
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: group
      iam_name: '{{ iam_group_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access.json'
  - name: Assert policy was added for group
    assert:
      that:
      - result.changed == True
      - result.policies == ["{{ iam_policy_name }}"]
      - result.group_name == "{{ iam_group_name }}"
  - name: Update policy for group
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: group
      iam_name: '{{ iam_group_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access_with_id.json'
  - name: Assert policy was updated for group
    assert:
      that:
      - result.changed == True
  - name: Update policy for group with same policy
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: group
      iam_name: '{{ iam_group_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_document: '{{ tmpdir.path }}/no_access_with_id.json'
  - name: Assert policy did not change for group
    assert:
      that:
      - result.changed == False
  - name: Create policy for group using policy_json
    register: result
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: group
      iam_name: '{{ iam_group_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: present
      policy_json: '{{ lookup(''file'', ''{{ tmpdir.path }}/no_access.json'') }}'
  - name: Assert policy was added for group
    assert:
      that:
      - result.changed == True
      - result.policies == ["{{ iam_policy_name }}"]
      - result.group_name == "{{ iam_group_name }}"
  - name: Delete policy for user
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: user
      iam_name: '{{ iam_user_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: absent
  - assert:
      that:
      - result.changed == True
  - name: Delete policy for role
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: role
      iam_name: '{{ iam_role_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: absent
  - assert:
      that:
      - result.changed == True
  - name: Delete policy for group
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: group
      iam_name: '{{ iam_group_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: absent
  - assert:
      that:
      - result.changed == True
  always:
  - name: Delete policy for user
    ignore_errors: true
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: user
      iam_name: '{{ iam_user_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: absent
  - name: Delete user for tests
    ignore_errors: true
    ansible.amazon.iam_user:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ iam_user_name }}'
      state: absent
  - name: Delete policy for role
    ignore_errors: true
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: role
      iam_name: '{{ iam_role_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: absent
  - name: Delete role for tests
    ignore_errors: true
    ansible.amazon.iam_role:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ iam_role_name }}'
      state: absent
  - name: Delete policy for group
    ignore_errors: true
    ansible.amazon.iam_policy:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      iam_type: group
      iam_name: '{{ iam_group_name }}'
      policy_name: '{{ iam_policy_name }}'
      state: absent
  - name: Delete group for tests
    ignore_errors: true
    ansible.amazon.iam_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ iam_group_name }}'
      state: absent
  - name: Delete temporary folder containing the policies
    file:
      state: absent
      path: '{{ tmpdir.path }}/'
