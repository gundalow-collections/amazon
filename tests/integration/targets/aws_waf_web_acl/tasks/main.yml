- block:
  - name: set yaml anchor
    set_fact:
      aws_connection_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
    no_log: true
  - name: create WAF IP condition
    register: create_waf_ip_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 10.0.0.0/8
      type: ip
  - name: add an IP address to WAF condition
    register: add_ip_address_to_waf_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 10.0.0.0/8
      - ip_address: 192.168.0.0/24
      type: ip
  - name: check expected waf filter length
    assert:
      that:
      - add_ip_address_to_waf_condition.condition.ip_set_descriptors|length == 2
  - name: add an IP address to WAF condition (rely on purge_filters defaulting to
      false)
    register: add_ip_address_to_waf_condition_no_purge
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 192.168.10.0/24
      type: ip
  - name: check waf filter length has increased
    assert:
      that:
      - add_ip_address_to_waf_condition_no_purge.condition.ip_set_descriptors|length
        == 3
      - add_ip_address_to_waf_condition_no_purge.changed
  - name: add an IP address to WAF condition (set purge_filters)
    register: add_ip_address_to_waf_condition_purge
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 192.168.20.0/24
      purge_filters: true
      type: ip
  - name: check waf filter length has reduced
    assert:
      that:
      - add_ip_address_to_waf_condition_purge.condition.ip_set_descriptors|length
        == 1
      - add_ip_address_to_waf_condition_purge.changed
  - name: create WAF byte condition
    register: create_waf_byte_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_byte_condition'
      filters:
      - field_to_match: header
        position: STARTS_WITH
        target_string: Hello
        header: Content-type
      type: byte
  - name: recreate WAF byte condition
    register: recreate_waf_byte_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_byte_condition'
      filters:
      - field_to_match: header
        position: STARTS_WITH
        target_string: Hello
        header: Content-type
      type: byte
  - name: assert that no change was made
    assert:
      that:
      - not recreate_waf_byte_condition.changed
  - name: create WAF geo condition
    register: create_waf_geo_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_geo_condition'
      filters:
      - country: US
      - country: AU
      - country: AT
      type: geo
  - name: create WAF size condition
    register: create_waf_size_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_size_condition'
      filters:
      - field_to_match: query_string
        size: 300
        comparison: GT
      type: size
  - name: create WAF sql condition
    register: create_waf_sql_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_sql_condition'
      filters:
      - field_to_match: query_string
        transformation: url_decode
      type: sql
  - name: create WAF xss condition
    register: create_waf_xss_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_xss_condition'
      filters:
      - field_to_match: query_string
        transformation: url_decode
      type: xss
  - name: create WAF regex condition
    register: create_waf_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      filters:
      - field_to_match: query_string
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
  - name: create a second WAF regex condition with the same regex
    register: create_second_waf_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition_part_2'
      filters:
      - field_to_match: header
        header: cookie
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
  - name: check that the pattern is shared
    assert:
      that:
      - 'create_waf_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id
        == create_second_waf_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id

        '
      - create_second_waf_regex_condition.changed
  - name: delete first WAF regex condition
    register: delete_waf_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      filters:
      - field_to_match: query_string
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      state: absent
  - name: delete second WAF regex condition
    register: delete_second_waf_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition_part_2'
      filters:
      - field_to_match: header
        header: cookie
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      state: absent
  - name: create WAF regex condition
    register: recreate_waf_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      filters:
      - field_to_match: query_string
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
  - name: check that a new pattern is created (because the first pattern should have
      been deleted once unused)
    assert:
      that:
      - 'recreate_waf_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id
        != create_waf_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id

        '
  - name: create WAF Regional IP condition
    register: create_waf_regional_ip_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 10.0.0.0/8
      type: ip
      region: '{{ aws_region }}'
      waf_regional: true
  - name: add an IP address to WAF Regional condition
    register: add_ip_address_to_waf_regional_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 10.0.0.0/8
      - ip_address: 192.168.0.0/24
      type: ip
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check expected WAF Regional filter length
    assert:
      that:
      - add_ip_address_to_waf_regional_condition.condition.ip_set_descriptors|length
        == 2
  - name: add an IP address to WAF Regional condition (rely on purge_filters defaulting
      to false)
    register: add_ip_address_to_waf_regional_condition_no_purge
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 192.168.10.0/24
      type: ip
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional filter length has increased
    assert:
      that:
      - add_ip_address_to_waf_regional_condition_no_purge.condition.ip_set_descriptors|length
        == 3
      - add_ip_address_to_waf_regional_condition_no_purge.changed
  - name: add an IP address to WAF Regional condition (set purge_filters)
    register: add_ip_address_to_waf_regional_condition_purge
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      filters:
      - ip_address: 192.168.20.0/24
      purge_filters: true
      type: ip
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional filter length has reduced
    assert:
      that:
      - add_ip_address_to_waf_regional_condition_purge.condition.ip_set_descriptors|length
        == 1
      - add_ip_address_to_waf_regional_condition_purge.changed
  - name: create WAF Regional byte condition
    register: create_waf_regional_byte_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_byte_condition'
      filters:
      - field_to_match: header
        position: STARTS_WITH
        target_string: Hello
        header: Content-type
      type: byte
      region: '{{ aws_region }}'
      waf_regional: true
  - name: recreate WAF Regional byte condition
    register: recreate_waf_regional_byte_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_byte_condition'
      filters:
      - field_to_match: header
        position: STARTS_WITH
        target_string: Hello
        header: Content-type
      type: byte
      region: '{{ aws_region }}'
      waf_regional: true
  - name: assert that no change was made
    assert:
      that:
      - not recreate_waf_regional_byte_condition.changed
  - name: create WAF Regional geo condition
    register: create_waf_regional_geo_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_geo_condition'
      filters:
      - country: US
      - country: AU
      - country: AT
      type: geo
      region: '{{ aws_region }}'
      waf_regional: true
  - name: create WAF Regional size condition
    register: create_waf_regional_size_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_size_condition'
      filters:
      - field_to_match: query_string
        size: 300
        comparison: GT
      type: size
      region: '{{ aws_region }}'
      waf_regional: true
  - name: create WAF Regional sql condition
    register: create_waf_regional_sql_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_sql_condition'
      filters:
      - field_to_match: query_string
        transformation: url_decode
      type: sql
      region: '{{ aws_region }}'
      waf_regional: true
  - name: create WAF Regional xss condition
    register: create_waf_regional_xss_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_xss_condition'
      filters:
      - field_to_match: query_string
        transformation: url_decode
      type: xss
      region: '{{ aws_region }}'
      waf_regional: true
  - name: create WAF Regional regex condition
    register: create_waf_regional_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      filters:
      - field_to_match: query_string
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      region: '{{ aws_region }}'
      waf_regional: true
  - name: create a second WAF Regional regex condition with the same regex
    register: create_second_waf_regional_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition_part_2'
      filters:
      - field_to_match: header
        header: cookie
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check that the pattern is shared
    assert:
      that:
      - 'create_waf_regional_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id
        == create_second_waf_regional_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id

        '
      - create_second_waf_regional_regex_condition.changed
  - name: delete first WAF Regional regex condition
    register: delete_waf_regional_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      filters:
      - field_to_match: query_string
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: delete second WAF Regional regex condition
    register: delete_second_waf_regional_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition_part_2'
      filters:
      - field_to_match: header
        header: cookie
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: create WAF Regional regex condition
    register: recreate_waf_regional_regex_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      filters:
      - field_to_match: query_string
        regex_pattern:
          name: greetings
          regex_strings:
          - '[hH]ello'
          - ^Hi there
          - .*Good Day to You
      type: regex
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check that a new pattern is created (because the first pattern should have
      been deleted once unused)
    assert:
      that:
      - 'recreate_waf_regional_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id
        != create_waf_regional_regex_condition.condition.regex_match_tuples[0].regex_pattern_set_id

        '
  - name: create WAF rule
    register: create_aws_waf_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_regex_condition'
        type: regex
        negated: false
      - name: '{{ resource_prefix }}_geo_condition'
        type: geo
        negated: false
      - name: '{{ resource_prefix }}_byte_condition'
        type: byte
        negated: false
      purge_conditions: true
  - name: check WAF rule
    assert:
      that:
      - create_aws_waf_rule.changed
      - create_aws_waf_rule.rule.predicates|length == 3
  - name: recreate WAF rule
    register: create_aws_waf_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_regex_condition'
        type: regex
        negated: false
      - name: '{{ resource_prefix }}_geo_condition'
        type: geo
        negated: false
      - name: '{{ resource_prefix }}_byte_condition'
        type: byte
        negated: false
  - name: check WAF rule did not change
    assert:
      that:
      - not create_aws_waf_rule.changed
      - create_aws_waf_rule.rule.predicates|length == 3
  - name: add further WAF rules relying on purge_conditions defaulting to false
    register: add_conditions_to_aws_waf_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_ip_condition'
        type: ip
        negated: true
      - name: '{{ resource_prefix }}_sql_condition'
        type: sql
        negated: false
      - name: '{{ resource_prefix }}_xss_condition'
        type: xss
        negated: false
  - name: check WAF rule added rules
    assert:
      that:
      - add_conditions_to_aws_waf_rule.changed
      - add_conditions_to_aws_waf_rule.rule.predicates|length == 6
  - name: remove some rules through purging conditions
    register: add_and_remove_waf_rule_conditions
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_ip_condition'
        type: ip
        negated: true
      - name: '{{ resource_prefix }}_xss_condition'
        type: xss
        negated: false
      - name: '{{ resource_prefix }}_byte_condition'
        type: byte
        negated: false
      - name: '{{ resource_prefix }}_size_condition'
        type: size
        negated: false
      purge_conditions: true
  - name: check WAF rules were updated as expected
    assert:
      that:
      - add_and_remove_waf_rule_conditions.changed
      - add_and_remove_waf_rule_conditions.rule.predicates|length == 4
  - name: attempt to remove an in use condition
    ignore_errors: true
    register: remove_in_use_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_size_condition'
      type: size
      state: absent
  - name: check failure was sensible
    assert:
      that:
      - remove_in_use_condition.failed
      - '''Condition {{ resource_prefix }}_size_condition is in use'' in remove_in_use_condition.msg'
  - name: create WAF Regional rule
    register: create_aws_waf_regional_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_regex_condition'
        type: regex
        negated: false
      - name: '{{ resource_prefix }}_geo_condition'
        type: geo
        negated: false
      - name: '{{ resource_prefix }}_byte_condition'
        type: byte
        negated: false
      purge_conditions: true
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional rule
    assert:
      that:
      - create_aws_waf_regional_rule.changed
      - create_aws_waf_regional_rule.rule.predicates|length == 3
  - name: recreate WAF Regional rule
    register: create_aws_waf_regional_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_regex_condition'
        type: regex
        negated: false
      - name: '{{ resource_prefix }}_geo_condition'
        type: geo
        negated: false
      - name: '{{ resource_prefix }}_byte_condition'
        type: byte
        negated: false
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional rule did not change
    assert:
      that:
      - not create_aws_waf_regional_rule.changed
      - create_aws_waf_regional_rule.rule.predicates|length == 3
  - name: add further WAF Regional rules relying on purge_conditions defaulting to
      false
    register: add_conditions_to_aws_waf_regional_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_ip_condition'
        type: ip
        negated: true
      - name: '{{ resource_prefix }}_sql_condition'
        type: sql
        negated: false
      - name: '{{ resource_prefix }}_xss_condition'
        type: xss
        negated: false
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional rule added rules
    assert:
      that:
      - add_conditions_to_aws_waf_regional_rule.changed
      - add_conditions_to_aws_waf_regional_rule.rule.predicates|length == 6
  - name: remove some rules through purging conditions
    register: add_and_remove_waf_regional_rule_conditions
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      conditions:
      - name: '{{ resource_prefix }}_ip_condition'
        type: ip
        negated: true
      - name: '{{ resource_prefix }}_xss_condition'
        type: xss
        negated: false
      - name: '{{ resource_prefix }}_byte_condition'
        type: byte
        negated: false
      - name: '{{ resource_prefix }}_size_condition'
        type: size
        negated: false
      purge_conditions: true
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional rules were updated as expected
    assert:
      that:
      - add_and_remove_waf_regional_rule_conditions.changed
      - add_and_remove_waf_regional_rule_conditions.rule.predicates|length == 4
  - name: attempt to remove an WAF Regional in use condition
    ignore_errors: true
    register: remove_in_use_condition
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_size_condition'
      type: size
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check failure was sensible
    assert:
      that:
      - remove_in_use_condition.failed
      - '''Condition {{ resource_prefix }}_size_condition is in use'' in remove_in_use_condition.msg'
  - name: create web ACL
    register: create_web_acl
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule'
        priority: 1
        action: block
      default_action: block
      purge_rules: true
      state: present
  - name: recreate web acl
    register: recreate_web_acl
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule'
        priority: 1
        action: block
      default_action: block
      state: present
  - name: check web acl was not changed
    assert:
      that:
      - not recreate_web_acl.changed
      - recreate_web_acl.web_acl.rules|length == 1
  - name: create a second WAF rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule_2'
      conditions:
      - name: '{{ resource_prefix }}_ip_condition'
        type: ip
        negated: true
      - name: '{{ resource_prefix }}_sql_condition'
        type: sql
        negated: false
      - name: '{{ resource_prefix }}_xss_condition'
        type: xss
        negated: false
  - name: add a new rule to the web acl
    register: web_acl_add_rule
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule_2'
        priority: 2
        action: allow
      default_action: block
      state: present
  - name: check that rule was added to the web acl
    assert:
      that:
      - web_acl_add_rule.changed
      - web_acl_add_rule.web_acl.rules|length == 2
  - name: use purge rules to remove the first rule
    register: web_acl_add_rule
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule_2'
        priority: 2
        action: allow
      purge_rules: true
      default_action: block
      state: present
  - name: check that rule was removed from the web acl
    assert:
      that:
      - web_acl_add_rule.changed
      - web_acl_add_rule.web_acl.rules|length == 1
  - name: swap two rules of same priority
    register: web_acl_swap_rule
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule'
        priority: 2
        action: allow
      purge_rules: true
      default_action: block
      state: present
  - name: attempt to delete the inuse first rule
    ignore_errors: true
    register: remove_inuse_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      state: absent
  - name: check that removing in-use rule fails
    assert:
      that:
      - remove_inuse_rule.failed
  - name: delete the web acl
    register: delete_web_acl
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      state: absent
  - name: check that web acl was deleted
    assert:
      that:
      - delete_web_acl.changed
      - not delete_web_acl.web_acl
  - name: delete the no longer in use first rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      state: absent
  - name: create WAF Regional web ACL
    register: create_waf_regional_web_acl
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule'
        priority: 1
        action: block
      default_action: block
      purge_rules: true
      state: present
      region: '{{ aws_region }}'
      waf_regional: true
  - name: recreate WAF Regional web acl
    register: recreate_waf_regional_web_acl
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule'
        priority: 1
        action: block
      default_action: block
      state: present
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check WAF Regional web acl was not changed
    assert:
      that:
      - not recreate_waf_regional_web_acl.changed
      - recreate_waf_regional_web_acl.web_acl.rules|length == 1
  - name: create a second WAF Regional rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule_2'
      conditions:
      - name: '{{ resource_prefix }}_ip_condition'
        type: ip
        negated: true
      - name: '{{ resource_prefix }}_sql_condition'
        type: sql
        negated: false
      - name: '{{ resource_prefix }}_xss_condition'
        type: xss
        negated: false
      region: '{{ aws_region }}'
      waf_regional: true
  - name: add a new rule to the WAF Regional web acl
    register: waf_regional_web_acl_add_rule
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule_2'
        priority: 2
        action: allow
      default_action: block
      state: present
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check that rule was added to the WAF Regional web acl
    assert:
      that:
      - waf_regional_web_acl_add_rule.changed
      - waf_regional_web_acl_add_rule.web_acl.rules|length == 2
  - name: use purge rules to remove the WAF Regional first rule
    register: waf_regional_web_acl_add_rule
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule_2'
        priority: 2
        action: allow
      purge_rules: true
      default_action: block
      state: present
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check that rule was removed from the WAF Regional web acl
    assert:
      that:
      - waf_regional_web_acl_add_rule.changed
      - waf_regional_web_acl_add_rule.web_acl.rules|length == 1
  - name: swap two WAF Regional rules of same priority
    register: waf_regional_web_acl_swap_rule
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      rules:
      - name: '{{ resource_prefix }}_rule'
        priority: 2
        action: allow
      purge_rules: true
      default_action: block
      state: present
      region: '{{ aws_region }}'
      waf_regional: true
  - name: attempt to delete the WAF Regional inuse first rule
    ignore_errors: true
    register: remove_waf_regional_inuse_rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check that removing WAF Regional in-use rule fails
    assert:
      that:
      - remove_waf_regional_inuse_rule.failed
  - name: delete the WAF Regional web acl
    register: delete_waf_regional_web_acl
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: check that WAF Regional web acl was deleted
    assert:
      that:
      - delete_waf_regional_web_acl.changed
      - not delete_waf_regional_web_acl.web_acl
  - name: delete the no longer in use WAF Regional first rule
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  always:
  - debug:
      msg: '****** TEARDOWN STARTS HERE ******'
  - name: delete the web acl
    ignore_errors: true
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      state: absent
      purge_rules: true
  - name: remove second WAF rule
    ignore_errors: true
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule_2'
      state: absent
      purge_conditions: true
  - name: remove WAF rule
    ignore_errors: true
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      state: absent
      purge_conditions: true
  - name: remove XSS condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_xss_condition'
      type: xss
      state: absent
  - name: remove SQL condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_sql_condition'
      type: sql
      state: absent
  - name: remove size condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_size_condition'
      type: size
      state: absent
  - name: remove geo condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_geo_condition'
      type: geo
      state: absent
  - name: remove byte condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_byte_condition'
      type: byte
      state: absent
  - name: remove ip address condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      type: ip
      state: absent
  - name: remove regex part 2 condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition_part_2'
      type: regex
      state: absent
  - name: remove first regex condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      type: regex
      state: absent
  - name: delete the WAF Regional web acl
    ignore_errors: true
    ansible.amazon.aws_waf_web_acl:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_web_acl'
      state: absent
      purge_rules: true
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove second WAF Regional rule
    ignore_errors: true
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule_2'
      state: absent
      purge_conditions: true
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional rule
    ignore_errors: true
    ansible.amazon.aws_waf_rule:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_rule'
      state: absent
      purge_conditions: true
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional XSS condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_xss_condition'
      type: xss
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional SQL condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_sql_condition'
      type: sql
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional size condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_size_condition'
      type: size
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional geo condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_geo_condition'
      type: geo
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional byte condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_byte_condition'
      type: byte
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional ip address condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_ip_condition'
      type: ip
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove WAF Regional regex part 2 condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition_part_2'
      type: regex
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
  - name: remove first WAF Regional regex condition
    ignore_errors: true
    ansible.amazon.aws_waf_condition:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      name: '{{ resource_prefix }}_regex_condition'
      type: regex
      state: absent
      region: '{{ aws_region }}'
      waf_regional: true
