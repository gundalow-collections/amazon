- block:
  - name: set connection information for all tasks
    set_fact:
      aws_connection_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
      awscli_connection_info:
        AWS_ACCESS_KEY_ID: '{{ aws_access_key }}'
        AWS_SECRET_ACCESS_KEY: '{{ aws_secret_key }}'
        AWS_SESSION_TOKEN: '{{ security_token }}'
        AWS_DEFAULT_REGION: '{{ aws_region }}'
    no_log: true
  - name: create VPC
    register: vpc
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr_block: 10.228.228.0/22
      name: '{{ resource_prefix }}_vpc'
      state: present
  - name: create internet gateway
    register: igw
    ansible.amazon.ec2_vpc_igw:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
      tags:
        Name: '{{ resource_prefix }}'
  - name: create public subnet
    with_items:
    - cidr: 10.228.228.0/24
      az: a
      public: 'True'
    - cidr: 10.228.229.0/24
      az: b
      public: 'True'
    - cidr: 10.228.230.0/24
      az: a
      public: 'False'
    - cidr: 10.228.231.0/24
      az: b
      public: 'False'
    register: subnets
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr: '{{ item.cidr }}'
      az: '{{ aws_region}}{{ item.az }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
      tags:
        Public: '{{ item.public|string }}'
        Name: '{{ item.public|ternary(''public'', ''private'') }}-{{ item.az }}'
  - ec2_vpc_subnet_facts:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      filters:
        vpc-id: '{{ vpc.vpc.id }}'
    register: vpc_subnets
  - name: create list of subnet ids
    set_fact:
      alb_subnets: '{{ vpc_subnets|json_query(''subnets[?tags.Public == `True`].id'')
        }}'
      private_subnets: '{{ vpc_subnets|json_query(''subnets[?tags.Public != `True`].id'')
        }}'
  - name: create a route table
    register: route_table
    ansible.amazon.ec2_vpc_route_table:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Name: igw-route
        Created: '{{ resource_prefix }}'
      subnets: '{{ alb_subnets + private_subnets }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: '{{ igw.gateway_id }}'
  - register: sec_group
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ resource_prefix }}'
      description: security group for Ansible ALB integration tests
      state: present
      vpc_id: '{{ vpc.vpc.id }}'
      rules:
      - proto: tcp
        from_port: 1
        to_port: 65535
        cidr_ip: 0.0.0.0/0
  - name: create a target group for testing
    register: tg
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ tg_name }}'
      protocol: http
      port: 80
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
  - name: create privatekey for testing
    ansible.misc.openssl_privatekey:
      path: ./ansible_alb_test.pem
      size: 2048
  - name: create csr for cert
    ansible.misc.openssl_csr:
      path: ./ansible_alb_test.csr
      privatekey_path: ./ansible_alb_test.pem
      C: US
      ST: AnyPrincipality
      L: AnyTown
      O: AnsibleIntegrationTest
      OU: Test
      CN: ansible-alb-test.example.com
  - name: create certificate
    ansible.misc.openssl_certificate:
      path: ./ansible_alb_test.crt
      privatekey_path: ./ansible_alb_test.pem
      csr_path: ./ansible_alb_test.csr
      provider: selfsigned
  - name: upload server cert to iam
    register: cert_upload
    ansible.amazon.iam_cert:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ alb_name }}'
      state: present
      cert: ./ansible_alb_test.crt
      key: ./ansible_alb_test.pem
  - name: register certificate arn to acm_arn fact
    set_fact:
      cert_arn: '{{ cert_upload.arn }}'
  - include_tasks: test_multiple_actions_fail.yml
  always:
  - name: destroy ALB
    ignore_errors: true
    ansible.amazon.elb_application_lb:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ alb_name }}'
      state: absent
      wait: true
      wait_timeout: 600
  - name: destroy target group if it was created
    register: remove_tg
    retries: 10
    delay: 5
    until: remove_tg is success
    when: tg is defined
    ignore_errors: true
    ansible.amazon.elb_target_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ tg_name }}'
      protocol: http
      port: 80
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
      wait: true
      wait_timeout: 600
  - name: destroy acm certificate
    register: remove_cert
    retries: 10
    delay: 5
    until: remove_cert is success
    when: cert_arn is defined
    ignore_errors: true
    ansible.amazon.iam_cert:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ alb_name }}'
      state: absent
  - name: destroy sec group
    register: remove_sg
    retries: 10
    delay: 5
    until: remove_sg is success
    ignore_errors: true
    ansible.amazon.ec2_group:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      name: '{{ sec_group.group_name }}'
      description: security group for Ansible ALB integration tests
      state: absent
      vpc_id: '{{ vpc.vpc.id }}'
  - name: remove route table
    register: remove_rt
    retries: 10
    delay: 5
    until: remove_rt is success
    ignore_errors: true
    ansible.amazon.ec2_vpc_route_table:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      route_table_id: '{{ route_table.route_table.route_table_id }}'
      lookup: id
      state: absent
  - name: destroy subnets
    register: remove_subnet
    retries: 10
    delay: 5
    until: remove_subnet is success
    with_items:
    - cidr: 10.228.228.0/24
    - cidr: 10.228.229.0/24
    - cidr: 10.228.230.0/24
    - cidr: 10.228.231.0/24
    ignore_errors: true
    ansible.amazon.ec2_vpc_subnet:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr: '{{ item.cidr }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
  - name: destroy internet gateway
    register: remove_igw
    retries: 10
    delay: 5
    until: remove_igw is success
    ignore_errors: true
    ansible.amazon.ec2_vpc_igw:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Name: '{{ resource_prefix }}'
      state: absent
  - name: destroy VPC
    register: remove_vpc
    retries: 10
    delay: 5
    until: remove_vpc is success
    ignore_errors: true
    ansible.amazon.ec2_vpc_net:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token }}'
      region: '{{ aws_region }}'
      cidr_block: 10.228.228.0/22
      name: '{{ resource_prefix }}_vpc'
      state: absent
